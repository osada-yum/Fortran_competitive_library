** priority queue
*** whole module of the priority queue
priority queue モジュール全体は以下のとおり.
型毎にnowebマクロを展開する.
#+name: priority_queue-module
#+begin_src fortran :exports code :tangle "priority_queue_m.F90" :comment link :noweb no-export
  module priority_queue_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    <<declaration-priority_queue-var(type_base="integer", type_kind="int32")>>
    <<declaration-priority_queue-var(type_base="integer", type_kind="int64")>>
    <<declaration-priority_queue-var(type_base="real", type_kind="real32")>>
    <<declaration-priority_queue-var(type_base="real", type_kind="real64")>>
    <<declaration-priority_queue-var(type_base="character")>>
  contains
    <<procedures-priority_queue-var(type_base="integer", type_kind="int32")>>
    <<procedures-priority_queue-var(type_base="integer", type_kind="int64")>>
    <<procedures-priority_queue-var(type_base="real", type_kind="real32")>>
    <<procedures-priority_queue-var(type_base="real", type_kind="real64")>>
    <<procedures-priority_queue-var(type_base="character")>>
  end module priority_queue_m
#+end_src
*** declaration of the priority queue
まず, ~priority_queue~ 型を宣言する.
配列を伸長させて優先度付きキューを実装する.
挿入と削除操作は =O(log n)= で, 先頭の参照は =O(1)= で可能.

~bash~ を用いて ~${variable}~ を展開する.
- ~${pq}~ は優先度付きキューの型の名前である.
- ~${type}~ は優先度付きキューの要素の型の名前である.
- ~${op}~ は `<` か `>`.
#+name: declaration-priority_queue
#+begin_src fortran :exports code
  public :: ${pq}
  type :: ${pq}
     private
     integer(int32) :: size_ = 0_int32, capa_ = 0_int32
     ${type}, allocatable :: arr_(:)
   contains
     procedure, pass :: push  => push_${pq}
     procedure, pass :: pop   => pop_${pq}
     procedure, pass :: front => front_${pq}
     procedure, pass :: size => size_${pq}
     procedure, pass :: empty     => empty_${pq}
     procedure, pass :: not_empty => not_empty_${pq}
     ! procedure, pass :: dump => dump_${pq}
  end type ${pq}
#+end_src
*** procedures of the priority queue
:PROPERTIES:
:header-args: :noweb-ref procedures-priority_queue
:END:
**** push
~push~ はヒープへ要素を追加し, ヒープを再構成する.
#+name: push_priority_queue
#+begin_src fortran :exports code
  !> push_${pq}: adds an element to the heap and reconstructs the heap by ${op} order.
  subroutine push_${pq}(this, val)
    class(${pq}), intent(inout) :: this
    ${type}, intent(in) :: val
    ${type} :: tmp
    integer(int32) :: i
    if (this%size_ == this%capa_) then
       if (this%capa_ == 0) then
          this%capa_ = 1
          allocate(this%arr_(1))
       else
          this%capa_ = 2*this%capa_
          block
            ${type}, allocatable :: tmp_arr(:)
            allocate(tmp_arr(this%capa_))
            tmp_arr(1:this%size_) = this%arr_(1:this%size_)
            call move_alloc(from = tmp_arr, to = this%arr_)
          end block
       end if
    end if
    this%size_ = this%size_ + 1
    ! add `val` to heap.
    this%arr_(this%size_) = val
    i = this%size_
    tmp = val
    upheap:do ! reconstruct the heap by ${op}.
       if (i == 1) then ! top of the heap
          this%arr_(1) = tmp
          exit
       else if (tmp ${op} this%arr_(i/2)) then ! move the element up in the heap
          this%arr_(i) = this%arr_(i/2)
       else ! move the element up in the heap
          this%arr_(i) = tmp
          tmp = this%arr_(i/2)
       end if
       i = i / 2
    end do upheap
  end subroutine push_${pq}
#+end_src
**** pop
~pop~ はヒープへ要素を追加し, ヒープを再構成する.
#+name: pop_priority_queue
#+begin_src fortran :exports code
  !> pop_${pq}: extracts the ${op} element from the heap.
  ${type} function pop_${pq}(this) result(res)
    class(${pq}), intent(inout) :: this
    integer(int32) :: n, prev, next
    ! add `val` to heap.
    ! swap `arr(1)` and `arr(n)` and delete ${op} element, `arr(1)`.
    res = this%arr_(1)
    this%arr_(1) = this%arr_(this%size_)
    this%size_ = this%size_ - 1
    n = this%size_
    ! reconstruct the heap by moving the element `arr(n)` downwards.
    next = 1
    downheap:do ! reconstruct the heap by ${op}.
       prev = next
       if (2*prev > n) exit
       if (this%arr_(2*prev)      ${op} this%arr_(next)) &
            next = 2*prev
       if (2*prev+1 <= n) then
          if (this%arr_(2*prev+1) ${op} this%arr_(next)) &
               next = 2*prev+1
       end if
       if (prev == next) exit ! arr(next) < arr(2*prev) .and. arr(next) < arr(2*prev+1)
       call swap(this%arr_(prev), this%arr_(next))
    end do downheap
  contains
    subroutine swap(x, y)
      ${type}, intent(inout) :: x, y
      ${type} :: tmp
      tmp = x
      x   = y
      y   = tmp
    end subroutine swap
  end function pop_${pq}
#+end_src
**** front
~front~ は ヒープの一番上(minimum or maximum)の要素を返す.
#+name: front_priority_queue
#+begin_src fortran :exports code
  !> front_${pq}: returns the top of the element of the heap, which has either the minimum or maximum value depending on the type of heap.
  pure ${type} function front_${pq}(this) result(res)
    class(${pq}), intent(in) :: this
    res = this%arr_(1)
  end function front_${pq}
#+end_src
**** size
~size~ はヒープの要素数を返す.
#+name: size_priority_queue
#+begin_src fortran :exports code
  !> size_${pq}: returns the size of the heap.
  pure integer(int32) function size_${pq}(this) result(res)
    class(${pq}), intent(in) :: this
    res = this%size_
  end function size_${pq}
#+end_src
**** empty
~empty~ はヒープが空の場合は.true.を返す.
#+name: empty_priority_queue
#+begin_src fortran :exports code
  !> empty_${pq}: returns if heap is empty or not.
  pure logical function empty_${pq}(this) result(res)
    class(${pq}), intent(in) :: this
    res = this%size_ == 0
  end function empty_${pq}
#+end_src
**** not_empty
~not_empty~ はヒープが空の場合は.true.を返す.
#+name: not_empty_priority_queue
#+begin_src fortran :exports code
  !> not_empty_${pq}: returns if heap is not empty or empty.
  pure logical function not_empty_${pq}(this) result(res)
    class(${pq}), intent(in) :: this
    res = .not. this%empty()
  end function not_empty_${pq}
#+end_src
**** dump
~dump~
#+name: dump_priority_queue
#+begin_src fortran :exports code
  ! !> dump_${pq}: output the heap.
  ! subroutine dump_${pq}(this)
  !   class(${pq}), intent(in) :: this
  !   write(error_unit, '(*(g0, 1x))') this%arr_(1:this%size_)
  ! end subroutine dump_${pq}
#+end_src
*** process definition and procedures of the priority queue
#+name: priority_queue-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  case "${type_base}" in
      "character")
          type="${type_base}"
          suffix="${type_base}"
          ;;
      "type")
          type="type(${type_kind})"
          suffix="${type_kind}"
          ;;
      ,*)
          type="${type_base}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  pq="priority_queue"
  case "${op}" in
      "<")
          pq="${pq}_min_${suffix}"
      ;;
      ">")
          pq="${pq}_max_${suffix}"
      ;;
  esac
#+end_src
#+name: declaration-priority_queue-var
#+begin_src bash :exports code :var type_base="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  for op in "<" ">"
  do
  <<priority_queue-var>>
  cat <<EOF
  <<declaration-priority_queue>>
  EOF
  done
#+end_src
#+name: procedures-priority_queue-var
#+begin_src bash :exports code :var type_base="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  for op in "<" ">"
  do
  <<priority_queue-var>>
  cat <<EOF
  <<procedures-priority_queue>>
  EOF
  done
#+end_src
*** test
**** test本体
#+name: test-priority_queue
#+begin_src fortran :flags "-cpp -g -fbacktrace -fcheck=bounds" :exports code :results output :noweb no-export :cache yes
<<priority_queue-module>>
<<priority_queue-test>>
#+end_src

#+RESULTS[40adba9cd1b63a4b844c758c105e0cc6643b255d]: test-priority_queue

**** testプログラム
#+name: priority_queue-test
#+begin_src fortran :exports code :tangle "../../test/test_priority_queue.F90" :noweb no-export
  program test_priority_queue
    use, intrinsic :: iso_fortran_env
    use priority_queue_m
    implicit none
    integer(int32), parameter :: n = 20, arr(n) = [10, 1, 11, 2, 12, 3, 13, 4, 14, 5, 15, 6, 16, 7, 17, 8, 18, 9, 19, 20]
    integer(int32) :: i
    type(priority_queue_min_int32) :: pq_min
    type(priority_queue_max_int32) :: pq_max
    <<../Implementations.org:assert(cond="pq_min%empty()", code=1, message="pq_min must be empty.")>>
    <<../Implementations.org:assert(cond="pq_max%empty()", code=2, message="pq_max must be empty.")>>
    do i = 1, n
       call pq_min%push(arr(i))
       call pq_max%push(arr(i))
    end do
    <<../Implementations.org:assert(cond="pq_min%not_empty()", code=3, message="pq_min must be not empty.")>>
    <<../Implementations.org:assert(cond="pq_max%not_empty()", code=4, message="pq_max must be not empty.")>>
    <<../Implementations.org:assert-eq(eq1="n", eq2="pq_min%size()", code=10, message="The size of pq_min is illegal.")>>
    <<../Implementations.org:assert-eq(eq1="n", eq2="pq_max%size()", code=11, message="The size of pq_max is illegal.")>>
    do i = 1, n
       block
         integer(int32) :: val
         val = pq_min%pop()
         <<../Implementations.org:assert-eq(eq1="i", eq2="val", code=12, message="The value of pq_min%pop() is illegal.")>>
         val = pq_max%pop()
         <<../Implementations.org:assert-eq(eq1="n-i+1", eq2="val", code=13, message="The value of pq_max%pop() is illegal.")>>
       end block
    end do
  end program test_priority_queue
#+end_src
