** Hash table
*** open addressing hash by double hash
We implement open addressing hash table that use double hash by ~Fortran~.
The size of hash table is \(m\).
We cannot store the number of elements that is over \(m\).
**** The whole module of the hash table
This is the whole module.
The element of hash table is below.
#+name: hash_table-module
#+begin_src fortran :exports code :tangle "hash_table_m.F90" :comment link :noweb no-export
  module hash_table_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    integer, parameter :: max_elem = 701, small_m = 700, cardinal = 128
    public :: size

    type :: variable_char
       character(len=:), allocatable :: s
    end type variable_char
    <<expand-declaration-hash_table(type="integer", type_kind="int32")>>
    <<expand-declaration-hash_table(type="integer", type_kind="int64")>>
    <<expand-declaration-hash_table(type="real", type_kind="real32")>>
    <<expand-declaration-hash_table(type="real", type_kind="real64")>>
  contains

    pure integer(int32) function hash1(key)
      character(len=*), intent(in) :: key
      integer(int32) :: h, i
      h = 0_int32
      do i = len(key), 1, -1
         h = mod(h * cardinal + ichar(key(i:i)), max_elem)
      end do
      hash1 = h
    end function hash1
    pure integer(int32) function hash2(key)
      character(len=*), intent(in) :: key
      integer(int32) :: h, i
      h = 0_int32
      do i = len(key), 1, -1
         h = mod(h * cardinal + ichar(key(i:i)), small_m)
      end do
      hash2 = h + 1
    end function hash2

    <<expand-procedures-hash_table(type="integer", type_kind="int32")>>
    <<expand-procedures-hash_table(type="integer", type_kind="int64")>>
    <<expand-procedures-hash_table(type="real", type_kind="real32")>>
    <<expand-procedures-hash_table(type="real", type_kind="real64")>>
  end module hash_table_m
#+end_src
**** The type declaration of the hash table
#+name: declaration-hash_table
#+begin_src fortran :exports code
  public :: ${hash_table}
  type :: ${hash_table}
     private
     integer(int32) :: num_elems_
     type(variable_char), allocatable :: keys_(:)
     ${type_elements}, allocatable :: elems_(:)
     logical, allocatable :: vacancy_(:)
     logical, allocatable :: deleted_(:)
   contains
     procedure, pass :: insert => insert_${hash_table}
     procedure, pass :: delete => delete_${hash_table}
     procedure, pass :: search => search_${hash_table}
     procedure, pass :: write_${hash_table}
     generic :: write(formatted) => write_${hash_table}
  end type ${hash_table}

  interface ${hash_table}
     module procedure :: init_${hash_table}
  end interface ${hash_table}
  interface size
     module procedure :: size_${hash_table}
  end interface
#+end_src
**** The procedures of the hash table
#+name: procedures-hash_table
#+begin_src fortran :exports code :noweb no-export
    <<init-hash_table>>
    <<size-hash_table>>
    <<insert-hash_table>>
    <<delete-hash_table>>
    <<search-hash_table>>
    <<write-hash_table>>
#+end_src
***** initialize
#+name: init-hash_table
#+begin_src fortran :exports code
  impure type(${hash_table}) function init_${hash_table}() result(res)
    res%num_elems_ = 0
    allocate(res%elems_(0:max_elem-1))
    allocate(res%keys_(0:max_elem-1))
    allocate(res%vacancy_(0:max_elem-1), source = .true.)
    allocate(res%deleted_(0:max_elem-1), source = .false.)
  end function init_${hash_table}
#+end_src
***** size
#+name: size-hash_table
#+begin_src fortran :exports code
  pure integer(int32) function size_${hash_table}(ht) result(res)
    type(${hash_table}), intent(in) :: ht
    res = ht%num_elems_
  end function size_${hash_table}
#+end_src
***** insert-hash_table
Insert =val= into hash table.
If =key= is already in the hash table, change to new =val= corresponding to =key=.
#+name: insert-hash_table
#+begin_src fortran :exports code :noweb no-export
  subroutine insert_${hash_table} (this, key, val, ierr)
    class(${hash_table}), intent(inout) :: this
    character(len=*), intent(in) :: key
    ${type_elements}, intent(in) :: val
    integer(int32), optional, intent(out) :: ierr
    integer(int32) :: h1, h2, pos, i
    <<error-handing-initialize-ierr-hash_table>>
    h1 = hash1(key)
    h2 = hash2(key)
    pos = h1
    do i = 1, max_elem
       if (this%vacancy_(pos)) then
          this%keys_(pos)%s = key
          this%elems_(pos) = val
          this%vacancy_(pos) = .false.
          this%num_elems_ = this%num_elems_ + 1
          return
       else if (this%keys_(pos)%s == key) then
          this%elems_(pos) = val
          return
       end if
       pos = mod(pos + h2, max_elem)
    end do
    <<error-handing-capacity-over-hash_table>>
  end subroutine insert_${hash_table}
#+end_src
#+name: error-handing-initialize-ierr-hash_table
#+begin_src fortran :exports code
    if (present(ierr)) ierr = 0
#+end_src
#+name: error-handing-capacity-over-hash_table
#+begin_src fortran :exports code
    write(error_unit, '(a)') "Size limit: Hash table is too large."
    write(error_unit, '(a, i0)') __FILE__//": ", __LINE__
    if (present(ierr)) then
       ierr = 1
    else
       error stop 1
    end if
#+end_src
***** delete-hash_table
#+name: delete-hash_table
#+begin_src fortran :exports code
  subroutine delete_${hash_table} (this, key, found)
    class(${hash_table}), intent(inout) :: this
    character(len=*), intent(in) :: key
    logical, optional, intent(out) :: found
    integer(int32) :: h1, h2, pos, i
    h1 = hash1(key)
    h2 = hash2(key)
    pos = h1
    do i = 1, max_elem
       if (this%vacancy_(pos) .and. (.not. this%deleted_(pos))) exit
       if (this%keys_(pos)%s == key) then
          this%vacancy_(pos) = .true.
          this%deleted_(pos) = .true.
          this%num_elems_ = this%num_elems_ - 1
          if (present(found)) found = .true.
          return
       end if
       pos = mod(pos + h2, max_elem)
    end do
    if (present(found)) found = .false.
  end subroutine delete_${hash_table}
#+end_src
***** search-hash_table
#+name: search-hash_table
#+begin_src fortran :exports code
  ${type_elements} function search_${hash_table} (this, key, found) result(res)
    class(${hash_table}), intent(in) :: this
    character(len=*), intent(in) :: key
    logical, optional, intent(out) :: found
    integer(int32) :: h1, h2, pos, i
    res = -1
    h1 = hash1(key)
    h2 = hash2(key)
    pos = h1
    do i = 1, max_elem
       if (this%vacancy_(pos) .and. (.not. this%deleted_(pos))) exit
       if (this%keys_(pos)%s == key) then
          res = this%elems_(pos)
          if (present(found)) found = .true.
          return
       end if
       pos = mod(pos + h2, max_elem)
    end do
    if (present(found)) found = .false.
  end function search_${hash_table}
#+end_src
***** write-hash_table
#+name: write-hash_table
#+begin_src fortran :exports code
  subroutine write_${hash_table}(this, unit, iotype, v_list, iostat, iomsg)
    class(${hash_table}), intent(in) :: this
    integer             , intent(in)    :: unit
    character(len=*)    , intent(in)    :: iotype
    integer             , intent(in)    :: v_list(:)
    integer             , intent(out)   :: iostat
    character(len=*)    , intent(inout) :: iomsg
    integer(int32) :: i
    do i = 0, max_elem-1
       if (.not. this%vacancy_(i)) then
          write(unit, fmt='(a, i0, a, g18.10)', advance = "No", iostat=iostat, iomsg=iomsg) &
               "|", i, ": ht["//this%keys_(i)%s//"] => ", this%elems_(i)
       end if
    end do
  end subroutine write_${hash_table}
#+end_src
**** process definition and procedures of hash table
#+name: expand-hash_table
#+begin_src bash :exports code :shebang #!/bin/bash
   case "${type}" in
      "character")
          type_elements="type(variable_char)"
          type_val="character(len=:), allocatable"
          hash_table="hash_table_character"
          ;;
      ,*)
          type_elements="${type}(${type_kind})"
          type_val="${type_elements}"
          hash_table="hash_table_${type_kind}"
          ;;
  esac
#+end_src
#+name: expand-declaration-hash_table
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<expand-hash_table>>
  cat <<EOF
  <<declaration-hash_table>>
  EOF
#+end_src
#+name: expand-procedures-hash_table
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<expand-hash_table>>
  cat <<EOF
  <<procedures-hash_table>>
  EOF
#+end_src
**** test
#+name: hash_table-test
#+begin_src fortran :exports code :tangle "../../test/test_hash_table.f90" :comments link
  program test_hash_table
    use, intrinsic :: iso_fortran_env
    use hash_table_m
    implicit none
    integer(int32) :: v, i, j, k, ierr
    logical :: found
    character(len=:), allocatable :: s
    type(hash_table_int32) :: ht_i32, ht_i32_2
    ht_i32 = hash_table_int32()
    !> check empty character.
    call ht_i32%insert("", 0, ierr=ierr)
    v = ht_i32%search("", found=found)
    if (.not. found) then
       write(error_unit, *) "Empty string '' not found or not inserted..."
       error stop 2
    end if
    if (v /= 0) then
       write(error_unit, *) "Value of arr[''] must be 0"
       error stop 3
    end if
    !> check size
    !> insert 701 elements
    !> first, insert 10*10*7 elements
    do i = ichar("a"), ichar("a")+10-1
       do j = ichar("A"), ichar("A")+10-1
          do k = ichar(" "), ichar(" ")+7-1
             s = achar(i)//achar(j)//achar(k)
             call ht_i32%insert(s, 128**2*i+128*j+k, ierr)
          end do
       end do
    end do
    call ht_i32%insert("abcde", 0, ierr) ! size of hash table is maximum
    if (ierr == 0) then
       write(error_unit, *) "Insert in fully hash table must fail...", size(ht_i32)
       error stop 4
    end if
    call ht_i32%delete("aB$", found) ! delete elements in hash table.
    if (.not. found) then
       write(error_unit, *) "Delete failed...", size(ht_i32)
       error stop 5
    end if
    call ht_i32%insert("abcdef", 0, ierr) ! be able to insert
    if (ierr /= 0) then
       write(error_unit, *) "Delete or insert failed..."
       error stop 6
    end if
    !> insert 700 elements
    !> delete 700 elements
    !> first, insert 10*10*7 elements
    ht_i32_2 = hash_table_int32()
    do i = ichar("a"), ichar("a")+10-1
       do j = ichar("A"), ichar("A")+10-1
          do k = ichar(" "), ichar(" ")+7-1
             s = achar(i)//achar(j)//achar(k)
             call ht_i32_2%insert(s, 0, ierr)
             call ht_i32_2%delete(s, found=found)
             if (ierr /= 0) then
                write(error_unit, *) "Insert failed...", size(ht_i32_2)
                error stop 7
             end if
             if (.not. found) then
                write(error_unit, *) "Insert and Delete failed...", size(ht_i32_2)
                error stop 8
             end if
          end do
       end do
    end do
    if (size(ht_i32_2) /= 0) then
       write(error_unit, *) "Insert and delete failed...", size(ht_i32_2)
       error stop 9
    end if
    !> insert 700 elements
    !> delete 700 elements
    !> insert 700 elements
    !> first, insert 10*10*7 elements
    ht_i32_2 = hash_table_int32()
    do i = ichar("a"), ichar("a")+10-1
       do j = ichar("A"), ichar("A")+10-1
          do k = ichar(" "), ichar(" ")+7-1
             s = achar(i)//achar(j)//achar(k)
             call ht_i32_2%insert(s, 0)
             call ht_i32_2%delete(s, found=found)
             call ht_i32_2%insert(s, 0, ierr)
             if (ierr /= 0) then
                write(error_unit, *) "Insert failed...", size(ht_i32_2)
                error stop 10
             end if
             if (.not. found) then
                write(error_unit, *) "Delete failed...", size(ht_i32_2)
                error stop 11
             end if
          end do
       end do
    end do
    if (size(ht_i32_2) /= 700) then
       write(error_unit, *) "Insert and delete and insert failed...", size(ht_i32_2)
       error stop 12
    end if
  end program test_hash_table
#+end_src
#+name: test-hash_table
#+begin_src fortran :flags -g -fbacktrace -fcheck=all :exports code :results output :noweb no-export :cache yes
<<hash_table-module>>
<<hash_table-test>>
#+end_src

#+RESULTS[7012e9003deba0e9eb25cf053fa62c3a4d23f793]: test-hash_table
