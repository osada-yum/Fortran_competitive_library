** Tuple
*** Tuple2
**** Tuple2モジュール全体
#+name: tuple2-module
#+begin_src fortran :exports code :tangle "tuple2_m.F90" :comment link :noweb no-export
  module tuple2_m
    use, intrinsic :: iso_fortran_env
    implicit none
    <<declaration-tuple2-var(type1="integer", type1_kind="int32", type2="integer", type2_kind="int32")>>
    <<declaration-tuple2-var(type1="integer", type1_kind="int64", type2="integer", type2_kind="int64")>>
    <<declaration-tuple2-var(type1="real", type1_kind="real32", type2="integer", type2_kind="int32")>>
    <<declaration-tuple2-var(type1="real", type1_kind="real64", type2="integer", type2_kind="int64")>>
  contains
    <<procedures-tuple2-var(type1="integer", type1_kind="int32", type2="integer", type2_kind="int32")>>
    <<procedures-tuple2-var(type1="integer", type1_kind="int64", type2="integer", type2_kind="int64")>>
    <<procedures-tuple2-var(type1="real", type1_kind="real32", type2="integer", type2_kind="int32")>>
    <<procedures-tuple2-var(type1="real", type1_kind="real64", type2="integer", type2_kind="int64")>>
  end module tuple2_m
#+end_src
**** Tuple2の宣言
まず, 型 ~${tuple2}~ の宣言を行う.
~${tuple2}~ は2つの要素を持つ.
2つの要素の型は異なる型でも構わない.
単純でよく知られている型なのでカプセル化を行うメリットはない.

変数 ~${variable}~ は =bash= で展開される.
- ~${tuple2}~ は Tuple2型.
- ~${type1}~ は Tuple2型の一番目の型.
- ~${type2}~ は Tuple2型の二番目の型.
#+name: declaration-tuple2
#+begin_src fortran :exports code
  public :: ${tuple2}
  type :: ${tuple2}
     ${type1} :: v1_
     ${type2} :: v2_
  end type ${tuple2}
  private :: construct_${tuple2}
  interface ${tuple2}
     module procedure :: construct_${tuple2}
  end interface ${tuple2}
  interface operator(<)
     module procedure :: less_${tuple2}
  end interface operator(<)
  interface operator(<=)
     module procedure :: less_equal_${tuple2}
  end interface operator(<=)
  interface operator(>)
     module procedure :: greater_${tuple2}
  end interface operator(>)
  interface operator(>=)
     module procedure :: greater_equal_${tuple2}
  end interface operator(>=)
  interface operator(==)
     module procedure :: equal_${tuple2}
  end interface operator(==)
  interface operator(/=)
     module procedure :: not_equal_${tuple2}
  end interface operator(/=)
#+end_src
**** Tuple2の関数とか
:PROPERTIES:
:header-args: :noweb-ref procedures-tuple2
:END:
***** constructor
=function construct= は Tuple2型を生成する.
#+name: construct-tuple2
#+begin_src fortran :exports code
  !> construct_${tuple2}_by_size: Construct ${tuple2}.
  impure function construct_${tuple2}(val1, val2) result(res)
    type(${tuple2}) :: res
    ${type1}, intent(in) :: val1
    ${type2}, intent(in) :: val2
    res%v1_ = val1
    res%v2_ = val2
  end function construct_${tuple2}
#+end_src
***** compare_operator
比較演算子たち.
#+name: compare-tuple2
#+begin_src fortran :exports code :noweb no-export
  !> less_${tuple2}: Compare the first elements.
  !> Compare the second elements if the first elements are same.
  pure logical function less_${tuple2}(lhs, rhs) result(res)
    type(${tuple2}), intent(in) :: lhs, rhs
    res = lhs%v1_ < rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ < rhs%v2_
    end if
  end function less_${tuple2}
  pure logical function less_equal_${tuple2}(lhs, rhs) result(res)
    type(${tuple2}), intent(in) :: lhs, rhs
    res = lhs%v1_ < rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ <= rhs%v2_
    end if
  end function less_equal_${tuple2}
  pure logical function greater_${tuple2}(lhs, rhs) result(res)
    type(${tuple2}), intent(in) :: lhs, rhs
    res = lhs%v1_ > rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ > rhs%v2_
    end if
  end function greater_${tuple2}
  pure logical function greater_equal_${tuple2}(lhs, rhs) result(res)
    type(${tuple2}), intent(in) :: lhs, rhs
    res = lhs%v1_ > rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ >= rhs%v2_
    end if
  end function greater_equal_${tuple2}
  pure logical function equal_${tuple2}(lhs, rhs) result(res)
    type(${tuple2}), intent(in) :: lhs, rhs
    res = lhs%v1_ == rhs%v1_ .and. lhs%v2_ == rhs%v2_
  end function equal_${tuple2}
  pure logical function not_equal_${tuple2}(lhs, rhs) result(res)
    type(${tuple2}), intent(in) :: lhs, rhs
    res = lhs%v1_ /= rhs%v1_ .or. lhs%v2_ /= rhs%v2_
  end function not_equal_${tuple2}
#+end_src
**** Tuple2の展開
#+name: tuple2-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  suffix=""
  case "${type1}" in
      "character")
          type1="character"
          suffix="${suffix}_character"
          ;;
      "type")
          type1="type(${type1_kind})"
          suffix="${suffix}_${type1_kind}"
          ;;
      ,*)
          type1="${type1}(${type1_kind})"
          suffix="${suffix}_${type1_kind}"
          ;;
  esac
  case "${type2}" in
      "character")
          type2="character"
          suffix="${suffix}_character"
          ;;
      "type")
          type2="type(${type2_kind})"
          suffix="${suffix}_${type2_kind}"
          ;;
      ,*)
          type2="${type2}(${type2_kind})"
          suffix="${suffix}_${type2_kind}"
          ;;
  esac
  tuple2="tuple2${suffix}"
#+end_src
#+name: declaration-tuple2-var
#+begin_src bash :exports code :var type1="integer" type1_kind="int32" type2="integer" type2_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<tuple2-var>>
  cat <<EOF
  <<declaration-tuple2>>
  EOF
#+end_src
#+name: procedures-tuple2-var
#+begin_src bash :exports code :var type1="integer" type1_kind="int32" type2="integer" type2_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<tuple2-var>>
  cat <<EOF
  <<procedures-tuple2>>
  EOF
#+end_src
**** test
***** testコードブロック
#+name: test-tuple2
#+begin_src fortran :flags "-cpp -g -fbacktrace -fcheck=bounds" :exports code :results output :noweb no-export :cache yes
<<tuple2-module>>
<<tuple2-test>>
#+end_src

#+RESULTS[22d5d6b4b7ba0276b12c4c5762a4a15386809f5e]: test-tuple2

***** test本体
#+name: tuple2-test
#+begin_src fortran :exports code :tangle "../../test/test_tuple2.F90" :noweb no-export
  program test_tuple2
    use, intrinsic :: iso_fortran_env
    use tuple2_m, only: tup2 => tuple2_int32_int32, &
         operator(==), operator(/=), operator(<), operator(<=), operator(>), operator(>=)
    implicit none
    type(tup2) :: t1, t2
    t1 = tup2(1, 1)
    <<../Implementations.org:assert(cond="t1 == t1",       code=10, message="`==` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 /= t1", code=11, message="`/=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 < t1",  code=12, message="`<` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 >= t1",       code=13, message="`>=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t1",  code=14, message="`>` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t1",       code=15, message="`<=` for Tuple2 is illegal.")>>
    t2 = tup2(1, 2)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=20, message="`==` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=21, message="`/=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 < t2",        code=22, message="`<` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 >= t2", code=23, message="`>=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t2",  code=24, message="`>` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t2",       code=25, message="`<=` for Tuple2 is illegal.")>>
    t2 = tup2(100, 2)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=30, message="`==` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=31, message="`/=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 < t2",        code=32, message="`<` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 >= t2", code=33, message="`>=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t2",  code=34, message="`>` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t2",       code=35, message="`<=` for Tuple2 is illegal.")>>
    t2 = tup2(1, -100)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=40, message="`==` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=41, message="`/=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 < t2",  code=42, message="`<` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 >= t2",       code=43, message="`>=` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 > t2",        code=44, message="`>` for Tuple2 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 <= t2", code=45, message="`<=` for Tuple2 is illegal.")>>
  end program test_tuple2
#+end_src
**** Tuple2のunwrapped_vector
#+name: tuple2-unwrapped-module
#+begin_src fortran :exports code :tangle "tuple2_unwrapped_vector_m.F90" :comment link :noweb no-export
  module tuple2_unwrapped_vector_m
    use, intrinsic :: iso_fortran_env
    use tuple2_m
    implicit none
    <<vector.org:declaration-unwrapped_vector-var(type="type", type_kind="tuple2_int32_int32")>>
    <<vector.org:declaration-unwrapped_vector-var(type="type", type_kind="tuple2_int64_int64")>>
  contains
    <<vector.org:procedures-unwrapped_vector-var(type="type", type_kind="tuple2_int32_int32")>>
    <<vector.org:procedures-unwrapped_vector-var(type="type", type_kind="tuple2_int64_int64")>>
  end module tuple2_unwrapped_vector_m
#+end_src
**** Tuple2のB木
#+name: tuple2-btree-module
#+begin_src fortran :exports code :tangle "tuple2_btree_m.F90" :comment link :noweb no-export
  module tuple2_btree_m
    use, intrinsic :: iso_fortran_env
    use tuple2_m, only: &
         t2_i32_i32 => tuple2_int32_int32, &
         t2_i64_i64 => tuple2_int64_int64, &
         operator(==), operator(<), operator(<=), operator(>), operator(>=)
    implicit none
    private
    !> `t-1` must be the least number of elements in `btree_node` without root (minimum degree).
    integer(int32), parameter :: t = 6
    !> the number of internal node in `btree_node`.
    integer(int32), parameter :: inode = 2*t-1
    integer(int32), parameter :: iter_max_depth = 30
    <<btree.org:declaration-btree-var(key_base="type", key_kind="t2_i32_i32", val_base="integer", val_kind="int32")>>
    <<btree.org:declaration-btree-var(key_base="type", key_kind="t2_i64_i64", val_base="integer", val_kind="int64")>>
  contains
    <<btree.org:procedures-btree-var(key_base="type", key_kind="t2_i32_i32", val_base="integer", val_kind="int32")>>
    <<btree.org:procedures-btree-var(key_base="type", key_kind="t2_i64_i64", val_base="integer", val_kind="int64")>>
  end module tuple2_btree_m
#+end_src
***** test
#+name: test-tuple2-btree
#+begin_src fortran :flags "-cpp -g -fbacktrace -fcheck=bounds" :exports code :results output file :file "t2_btree.log" :noweb no-export :cache yes
    <<tuple2-module>>
    <<tuple2-btree-module>>
    <<tuple2-btree-test>>
#+end_src

#+RESULTS[64152e545a438a641ba6d7a09548f6bf1189cb33]: test-tuple2-btree
[[file:t2_btree.log]]

#+name: tuple2-btree-test
#+begin_src fortran :exports code :tangle "../../test/test_tuple2_btree_m.F90" :comment link :noweb no-export
  program test_tuple2_btree_m
    use, intrinsic :: iso_fortran_env
    use tuple2_m!, only: t2 => tuple2_int32_int32
    use tuple2_btree_m, only: bt_t2_to_int32 => btree_t2_i32_i32_to_int32, &
         bt_iter_t2_to_int32 => btree_node_iter_t2_i32_i32_to_int32
    implicit none
    integer(int32), parameter :: n = 1000
    call tuple2_btree_test_insertion_ascending(n)
  contains
    <<tuple2_btree-test-check_insertion_ascending>>
  end program test_tuple2_btree_m
#+end_src
****** 昇順に挿入.
#+name: tuple2_btree-test-check_insertion_ascending
#+begin_src fortran :exports code :noweb no-export
  subroutine tuple2_btree_test_insertion_ascending(n)
    integer(int32), intent(in) :: n
    type(bt_t2_to_int32) :: m
    type(bt_iter_t2_to_int32) :: iter
    type(tuple2_int32_int32) :: t
    integer(int32) :: i, j
    call m%init()
    do i = 1, n
       do j = 1, n
          call m%insert(tuple2_int32_int32(i, j), i+j)
       end do
    end do
    <<../Implementations.org:assert-eq(eq1="m%size()", eq2="int(n, int64)*n", code=11, message="Btree method `insert` are something wrong.")>>
    call m%check_invariant()
    do i = 1, n
       do j = 1, n
          call m%remove(tuple2_int32_int32(i, j))
       end do
    end do
    <<../Implementations.org:assert-eq(eq1="m%size()", eq2="0", code=12, message="Btree method `remove` are something wrong.")>>
    do i = 1, n
       do j = 1, n
          call m%insert(tuple2_int32_int32(i, j), i+j)
       end do
    end do
    iter = m%minimum_iter()
    do while (iter%is_not_end())
       t = iter%key()
       ! write(output_unit, '(*(i0, 1x))') t%fst(), t%snd()
       <<../Implementations.org:assert-eq(eq1="t%fst()+t%snd()", eq2="iter%val()", code=12, message="Btree iter is something wrong.")>>
       call iter%next()
    end do
    call m%check_invariant()
    <<../Implementations.org:assert-eq(eq1="m%size()", eq2="int(n, int64)*n", code=13, message="Btree method `insert` are something wrong.")>>
    do i = n, 1, -1
       do j = n, 1, -1
          call m%remove(tuple2_int32_int32(i, j))
       end do
    end do
    <<../Implementations.org:assert-eq(eq1="m%size()", eq2="0", code=14, message="Btree method `remove` are something wrong.")>>
  end subroutine tuple2_btree_test_insertion_ascending
#+end_src

**** Tuple2のpriority_queue
#+name: tuple2-priority_queue-module
#+begin_src fortran :exports code :tangle "tuple2_priority_queue_m.F90" :comment link :noweb no-export
  module tuple2_priority_queue_m
    use, intrinsic :: iso_fortran_env
    use tuple2_m
    implicit none
    <<priority_queue.org:declaration-priority_queue-var(type_base="type", type_kind="tuple2_int32_int32")>>
    <<priority_queue.org:declaration-priority_queue-var(type_base="type", type_kind="tuple2_int64_int64")>>
    <<priority_queue.org:declaration-priority_queue-var(type_base="type", type_kind="tuple2_real32_int32")>>
    <<priority_queue.org:declaration-priority_queue-var(type_base="type", type_kind="tuple2_real64_int64")>>
  contains
    <<priority_queue.org:procedures-priority_queue-var(type_base="type", type_kind="tuple2_int32_int32")>>
    <<priority_queue.org:procedures-priority_queue-var(type_base="type", type_kind="tuple2_int64_int64")>>
    <<priority_queue.org:procedures-priority_queue-var(type_base="type", type_kind="tuple2_real32_int32")>>
    <<priority_queue.org:procedures-priority_queue-var(type_base="type", type_kind="tuple2_real64_int64")>>
  end module tuple2_priority_queue_m
#+end_src
*** Tuple3
**** Tuple3モジュール全体
#+name: tuple3-module
#+begin_src fortran :exports code :tangle "tuple3_m.F90" :comment link :noweb no-export
  module tuple3_m
    use, intrinsic :: iso_fortran_env
    implicit none
    <<declaration-tuple3-var(type1="integer", type1_kind="int32", type2="integer", type2_kind="int32", type3="integer", type3_kind="int32")>>
    <<declaration-tuple3-var(type1="integer", type1_kind="int64", type2="integer", type2_kind="int64", type3="integer", type3_kind="int64")>>
  contains
    <<procedures-tuple3-var(type1="integer", type1_kind="int32", type2="integer", type2_kind="int32", type3="integer", type3_kind="int32")>>
    <<procedures-tuple3-var(type1="integer", type1_kind="int64", type2="integer", type2_kind="int64", type3="integer", type3_kind="int64")>>
  end module tuple3_m
#+end_src
**** Tuple3の宣言
まず, 型 ~${tuple3}~ の宣言を行う.
~${tuple3}~ は3つの要素を持つ.
3つの要素の型は異なる型でも構わない.
単純でよく知られている型なのでカプセル化を行うメリットはない.

変数 ~${variable}~ は =bash= で展開される.
- ~${tuple3}~ は Tuple3型.
- ~${type1}~ は Tuple3型の一番目の型.
- ~${type2}~ は Tuple3型の二番目の型.
- ~${type3}~ は Tuple3型の三番目の型.
#+name: declaration-tuple3
#+begin_src fortran :exports code
  public :: ${tuple3}
  type :: ${tuple3}
     private
     ${type1} :: v1_
     ${type2} :: v2_
     ${type3} :: v3_
  end type ${tuple3}
  public :: construct_${tuple3}
  interface ${tuple3}
     module procedure :: construct_${tuple3}
  end interface ${tuple3}
  interface operator(<)
     module procedure :: less_${tuple3}
  end interface operator(<)
  interface operator(<=)
     module procedure :: less_equal_${tuple3}
  end interface operator(<=)
  interface operator(>)
     module procedure :: greater_${tuple3}
  end interface operator(>)
  interface operator(>=)
     module procedure :: greater_equal_${tuple3}
  end interface operator(>=)
  interface operator(==)
     module procedure :: equal_${tuple3}
  end interface operator(==)
  interface operator(/=)
     module procedure :: not_equal_${tuple3}
  end interface operator(/=)
#+end_src
**** Tuple3の関数とか
:PROPERTIES:
:header-args: :noweb-ref procedures-tuple3
:END:
***** constructor
=function construct= は Tuple3型を生成する.
#+name: construct-tuple3
#+begin_src fortran :exports code
  !> construct_${tuple3}_by_size: Construct ${tuple3}.
  impure function construct_${tuple3}(val1, val2, val3) result(res)
    type(${tuple3}) :: res
    ${type1}, intent(in) :: val1
    ${type2}, intent(in) :: val2
    ${type3}, intent(in) :: val3
    res%v1_ = val1
    res%v2_ = val2
    res%v3_ = val3
  end function construct_${tuple3}
#+end_src
***** compare_operator
比較演算子たち.
#+name: compare-tuple3
#+begin_src fortran :exports code :noweb no-export
  !> less_${tuple3}: Compare the first elements.
  !> Compare the second elements if the first elements are same.
  logical function less_${tuple3}(lhs, rhs) result(res)
    type(${tuple3}), intent(in) :: lhs, rhs
    res = lhs%v1_ < rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ < rhs%v2_
       if (lhs%v2_ == rhs%v2_) then
          res = lhs%v3_ < rhs%v3_
       end if
    end if
  end function less_${tuple3}
  logical function less_equal_${tuple3}(lhs, rhs) result(res)
    type(${tuple3}), intent(in) :: lhs, rhs
    res = lhs%v1_ < rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ < rhs%v2_
       if (lhs%v2_ == rhs%v2_) then
          res = lhs%v3_ <= rhs%v3_
       end if
    end if
  end function less_equal_${tuple3}
  logical function greater_${tuple3}(lhs, rhs) result(res)
    type(${tuple3}), intent(in) :: lhs, rhs
    res = lhs%v1_ > rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ > rhs%v2_
       if (lhs%v2_ == rhs%v2_) then
          res = lhs%v3_ > rhs%v3_
       end if
    end if
  end function greater_${tuple3}
  logical function greater_equal_${tuple3}(lhs, rhs) result(res)
    type(${tuple3}), intent(in) :: lhs, rhs
    res = lhs%v1_ > rhs%v1_
    if (lhs%v1_ == rhs%v1_) then
       res = lhs%v2_ > rhs%v2_
       if (lhs%v2_ == rhs%v2_) then
          res = lhs%v3_ >= rhs%v3_
       end if
    end if
  end function greater_equal_${tuple3}
  logical function equal_${tuple3}(lhs, rhs) result(res)
    type(${tuple3}), intent(in) :: lhs, rhs
    res = lhs%v1_ == rhs%v1_ .and. lhs%v2_ == rhs%v2_ .and. lhs%v3_ == rhs%v3_
  end function equal_${tuple3}
  logical function not_equal_${tuple3}(lhs, rhs) result(res)
    type(${tuple3}), intent(in) :: lhs, rhs
    res = lhs%v1_ /= rhs%v1_ .or. lhs%v2_ /= rhs%v2_ .or. lhs%v3_ /= rhs%v3_
  end function not_equal_${tuple3}
#+end_src
**** Tuple3の展開
#+name: tuple3-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  suffix=""
  case "${type1}" in
      "character")
          type1="character"
          suffix="${suffix}_character"
          ;;
      "type")
          type1="type(${type1_kind})"
          suffix="${suffix}_${type1_kind}"
          ;;
      ,*)
          type1="${type1}(${type1_kind})"
          suffix="${suffix}_${type1_kind}"
          ;;
  esac
  case "${type2}" in
      "character")
          type2="character"
          suffix="${suffix}_character"
          ;;
      "type")
          type2="type(${type2_kind})"
          suffix="${suffix}_${type2_kind}"
          ;;
      ,*)
          type2="${type2}(${type2_kind})"
          suffix="${suffix}_${type2_kind}"
          ;;
  esac
  case "${type3}" in
      "character")
          type3="character"
          suffix="${suffix}_character"
          ;;
      "type")
          type3="type(${type3_kind})"
          suffix="${suffix}_${type3_kind}"
          ;;
      ,*)
          type3="${type3}(${type3_kind})"
          suffix="${suffix}_${type3_kind}"
          ;;
  esac
  tuple3="tuple3${suffix}"
#+end_src
#+name: declaration-tuple3-var
#+begin_src bash :exports code :var type1="integer" type_kind1="int32" type2="integer" type2_kind="int32" type3="integer" type3_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<tuple3-var>>
  cat <<EOF
  <<declaration-tuple3>>
  EOF
#+end_src
#+name: procedures-tuple3-var
#+begin_src bash :exports code :var type1="integer" type_kind1="int32" type2="integer" type2_kind="int32" type3="integer" type3_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<tuple3-var>>
  cat <<EOF
  <<procedures-tuple3>>
  EOF
#+end_src
**** test
***** testコードブロック
#+name: test-tuple3
#+begin_src fortran :flags "-cpp -g -fbacktrace -fcheck=bounds" :exports code :results output :noweb no-export :cache yes
<<tuple3-module>>
<<tuple3-test>>
#+end_src

#+RESULTS[690f7a0f9736907e7cf523601876408b5f436663]: test-tuple3

***** test本体
#+name: tuple3-test
#+begin_src fortran :exports code :tangle "../../test/test_tuple3.F90" :noweb no-export
  program test_tuple3
    use, intrinsic :: iso_fortran_env
    use tuple3_m
    implicit none
    type(tuple3_int32_int32_int32) :: t1, t2
    t1 = tuple3_int32_int32_int32(1, 1, 1)
    <<../Implementations.org:assert(cond="t1 == t1",       code=10, message="`==` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 /= t1", code=11, message="`/=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 < t1",  code=12, message="`<` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 >= t1",       code=13, message="`>=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t1",  code=14, message="`>` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t1",       code=15, message="`<=` for Tuple3 is illegal.")>>
    t2 = tuple3_int32_int32_int32(1, 1, 2)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=20, message="`==` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=21, message="`/=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 < t2",        code=22, message="`<` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 >= t2", code=23, message="`>=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t2",  code=24, message="`>` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t2",       code=25, message="`<=` for Tuple3 is illegal.")>>
    t2 = tuple3_int32_int32_int32(1, 2, 2)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=30, message="`==` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=31, message="`/=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 < t2",        code=32, message="`<` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 >= t2", code=33, message="`>=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t2",  code=34, message="`>` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t2",       code=35, message="`<=` for Tuple3 is illegal.")>>
    t2 = tuple3_int32_int32_int32(100, 1, 2)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=40, message="`==` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=41, message="`/=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 < t2",        code=42, message="`<` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 >= t2", code=43, message="`>=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 > t2",  code=44, message="`>` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 <= t2",       code=45, message="`<=` for Tuple3 is illegal.")>>
    t2 = tuple3_int32_int32_int32(0, 1, 2)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=50, message="`==` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=51, message="`/=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 < t2",        code=52, message="`<` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 >= t2", code=53, message="`>=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 > t2",  code=54, message="`>` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 <= t2",       code=55, message="`<=` for Tuple3 is illegal.")>>
    t2 = tuple3_int32_int32_int32(1, 1, -100)
    <<../Implementations.org:assert-false(cond="t1 == t2", code=50, message="`==` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 /= t2",       code=51, message="`/=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 < t2",        code=52, message="`<` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 >= t2", code=53, message="`>=` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert(cond="t1 > t2",  code=54, message="`>` for Tuple3 is illegal.")>>
    <<../Implementations.org:assert-false(cond="t1 <= t2",       code=55, message="`<=` for Tuple3 is illegal.")>>
  end program test_tuple3
#+end_src
**** Tuple3のunwrapped_vector
#+name: tuple3-unwrapped_vector-module
#+begin_src fortran :exports code :tangle "tuple3_unwrapped_vector_m.F90" :comment link :noweb no-export
  module tuple3_unwrapped_vector_m
    use, intrinsic :: iso_fortran_env
    use tuple3_m
    implicit none
    <<vector.org:declaration-unwrapped_vector-var(type="type", type_kind="tuple3_int32_int32_int32")>>
    <<vector.org:declaration-unwrapped_vector-var(type="type", type_kind="tuple3_int64_int64_int64")>>
  contains
    <<vector.org:procedures-unwrapped_vector-var(type="type", type_kind="tuple3_int32_int32_int32")>>
    <<vector.org:procedures-unwrapped_vector-var(type="type", type_kind="tuple3_int64_int64_int64")>>
  end module tuple3_unwrapped_vector_m
#+end_src
**** Tuple3のpriority_queue
#+name: tuple3-priority_queue-module
#+begin_src fortran :exports code :tangle "tuple3_priority_queue_m.F90" :comment link :noweb no-export
  module tuple3_priority_queue_m
    use, intrinsic :: iso_fortran_env
    use tuple3_m
    implicit none
    <<priority_queue.org:declaration-priority_queue-var(type_base="type", type_kind="tuple3_int32_int32_int32")>>
    <<priority_queue.org:declaration-priority_queue-var(type_base="type", type_kind="tuple3_int64_int64_int64")>>
  contains
    <<priority_queue.org:procedures-priority_queue-var(type_base="type", type_kind="tuple3_int32_int32_int32")>>
    <<priority_queue.org:procedures-priority_queue-var(type_base="type", type_kind="tuple3_int64_int64_int64")>>
  end module tuple3_priority_queue_m
#+end_src
