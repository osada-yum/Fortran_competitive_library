#! Include this file with settting these values.
#! :set VEC_DEQUE_ITEM_KIND = "int32"
#! :set VEC_DEQUE_ITEM_TYPE = "integer"
#:set VEC_DEQUE_ITEM = f"{VEC_DEQUE_ITEM_TYPE}({VEC_DEQUE_ITEM_KIND})"
#:set TYPE_VEC_DEQUE = f"vec_deque_{VEC_DEQUE_ITEM_KIND}"
module ${TYPE_VEC_DEQUE}$_m
  use, intrinsic :: iso_fortran_env
  implicit none
  private
  integer(int32), parameter :: init_size = 4
  public :: ${TYPE_VEC_DEQUE}$
  type :: ${TYPE_VEC_DEQUE}$
     private
     integer(int32) :: size_ = 0, capa_ = 0
     integer(int32) :: head_, tail_
     ${VEC_DEQUE_ITEM}$, allocatable :: arr_(:)
   contains
     procedure, pass :: init => init_${TYPE_VEC_DEQUE}$
     procedure, pass :: clear => clear_${TYPE_VEC_DEQUE}$
     procedure, pass, private :: resize => resize_${TYPE_VEC_DEQUE}$
     procedure, pass :: size => size_${TYPE_VEC_DEQUE}$
     procedure, pass :: push_front => push_front_${TYPE_VEC_DEQUE}$
     procedure, pass :: push_back  => push_back_${TYPE_VEC_DEQUE}$
     procedure, pass :: pop_front  => pop_front_${TYPE_VEC_DEQUE}$
     procedure, pass :: pop_back   => pop_back_${TYPE_VEC_DEQUE}$
     procedure, pass :: front  => front_${TYPE_VEC_DEQUE}$
     procedure, pass :: back   => back_${TYPE_VEC_DEQUE}$
     procedure, pass :: to_array => to_array_${TYPE_VEC_DEQUE}$
  end type ${TYPE_VEC_DEQUE}$
contains
  pure subroutine init_${TYPE_VEC_DEQUE}$(this)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    if (allocated(this%arr_)) return
    allocate(this%arr_(init_size))
    this%size_ = 0
    this%capa_ = init_size
    this%head_ = this%capa_
    this%tail_ = 1
  end subroutine init_${TYPE_VEC_DEQUE}$
  subroutine clear_${TYPE_VEC_DEQUE}$(this)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    if (.not. allocated(this%arr_)) return
    deallocate(this%arr_)
  end subroutine clear_${TYPE_VEC_DEQUE}$
  pure integer(int32) function size_${TYPE_VEC_DEQUE}$(this) result(res)
    class(${TYPE_VEC_DEQUE}$), intent(in) :: this
    res = this%size_
  end function size_${TYPE_VEC_DEQUE}$
  pure subroutine resize_${TYPE_VEC_DEQUE}$(this, capa)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    integer(int32), intent(in) :: capa
    integer(int32) :: s
    ${VEC_DEQUE_ITEM}$, allocatable :: tmp(:)
    if (capa <= this%size_) return
    allocate(tmp(capa))
    if (this%head_ < this%tail_) then
       !> (1???h...t???c), ...が意味のあるデータ, ???が意味のないデータ.
       tmp(this%head_+1:this%tail_-1) = this%arr_(this%head_+1:this%tail_-1)
       call move_alloc(from = tmp, to = this%arr_)
    else !> this%head_ >= this%tail_
       !> (1...t????h...c).
       tmp(1:this%tail_-1) = this%arr_(1:this%tail_-1)
       s = this%capa_ - (this%head_ + 1)
       tmp(capa-s:capa) = this%arr_(this%capa_-s:this%capa_)
       this%head_ = capa - s - 1
       call move_alloc(from = tmp, to = this%arr_)
    end if
    this%capa_ = capa
  end subroutine resize_${TYPE_VEC_DEQUE}$
  pure subroutine push_front_${TYPE_VEC_DEQUE}$(this, v)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    ${VEC_DEQUE_ITEM}$, intent(in) :: v
    if (.not. allocated(this%arr_)) &
         & call this%init()
    if (this%head_ == this%tail_) then
       call this%resize(this%capa_ * 2)
    end if
    this%arr_(this%head_) = v
    this%head_ = this%head_ - 1
    if (this%head_ < 1) this%head_ = this%capa_
    this%size_ = this%size_ + 1
  end subroutine push_front_${TYPE_VEC_DEQUE}$
  pure subroutine push_back_${TYPE_VEC_DEQUE}$(this, v)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    ${VEC_DEQUE_ITEM}$, intent(in) :: v
    if (.not. allocated(this%arr_)) &
         & call this%init()
    if (this%head_ == this%tail_) then
       call this%resize(this%capa_*2)
    end if
    this%arr_(this%tail_) = v
    this%tail_ = this%tail_ + 1
    if (this%tail_ > this%capa_) this%tail_ = 1
    this%size_ = this%size_ + 1
  end subroutine push_back_${TYPE_VEC_DEQUE}$
  pure subroutine pop_front_${TYPE_VEC_DEQUE}$(this)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    if (this%size_ == 0) then
       error stop "Error in pop_front: ${TYPE_VEC_DEQUE}$ is empty."
    end if
    this%size_ = this%size_ - 1
    this%head_ = this%head_ + 1
    if (this%head_ > this%capa_) this%head_ = 1
  end subroutine pop_front_${TYPE_VEC_DEQUE}$
  pure subroutine pop_back_${TYPE_VEC_DEQUE}$(this)
    class(${TYPE_VEC_DEQUE}$), intent(inout) :: this
    if (this%size_ == 0) then
       error stop "Error in pop_back: ${TYPE_VEC_DEQUE}$ is empty."
    end if
    this%size_ = this%size_ - 1
    this%tail_ = this%tail_ - 1
    if (this%tail_ < 1) this%tail_ = this%capa_
  end subroutine pop_back_${TYPE_VEC_DEQUE}$
  pure ${VEC_DEQUE_ITEM}$ function front_${TYPE_VEC_DEQUE}$(this) result(res)
    class(${TYPE_VEC_DEQUE}$), intent(in) :: this
    integer(int32) :: head
    if (this%size_ == 0) then
       error stop "Error in front: ${TYPE_VEC_DEQUE}$ is empty."
    end if
    head = this%head_ + 1
    if (head > this%capa_) head = 1
    res = this%arr_(head)
  end function front_${TYPE_VEC_DEQUE}$
  pure ${VEC_DEQUE_ITEM}$ function back_${TYPE_VEC_DEQUE}$(this) result(res)
    class(${TYPE_VEC_DEQUE}$), intent(in) :: this
    integer(int32) :: tail
    if (this%size_ == 0) then
       error stop "Error in back: ${TYPE_VEC_DEQUE}$ is empty."
    end if
    tail = this%tail_ - 1
    if (tail < 1) tail = this%capa_
    res = this%arr_(tail)
  end function back_${TYPE_VEC_DEQUE}$
  pure function to_array_${TYPE_VEC_DEQUE}$(this) result(res)
    class(${TYPE_VEC_DEQUE}$), intent(in) :: this
    ${VEC_DEQUE_ITEM}$, allocatable :: res(:)
    allocate(res(this%size_))
    if (this%head_ < this%tail_) then
       !> (1???h...t???c), ...が意味のあるデータ, ???が意味のないデータ.
       res(:) = this%arr_(this%head_+1:this%tail_-1)
    else !> this%head_ <= this%tail_
       !> (1...t????h...c).
       res(1 : this%capa_ - this%head_) = this%arr_(this%head_ + 1 : this%capa_)
       res(this%capa_ - this%head_ + 1 : this%size_) = this%arr_(1 : this%tail_ - 1)
    end if
  end function to_array_${TYPE_VEC_DEQUE}$
end module ${TYPE_VEC_DEQUE}$_m
