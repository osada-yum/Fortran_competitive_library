* lazy segment tree
** 遅延伝播セグメント木 モジュール全体
#+name： lazy_segment_tree-module
#+begin_src fortran :exports code :tangle "lazy_segment_tree_m.F90" :comment link :noweb no-export
  module lazy_segment_tree_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    <<declaration-lazy_segment_tree-var(val_base="integer", val_kind="int32")>>
    <<declaration-monoid_op-var(val_base="integer", val_kind="int32")>>
    <<declaration-lazy_segment_tree-var(val_base="integer", val_kind="int64")>>
    <<declaration-monoid_op-var(val_base="integer", val_kind="int64")>>
  contains
    <<procedures-lazy_segment_tree-var(val_base="integer", val_kind="int32")>>
    <<procedures-monoid_op-var(val_base="integer", val_kind="int32")>>
    <<procedures-lazy_segment_tree-var(val_base="integer", val_kind="int64")>>
    <<procedures-monoid_op-var(val_base="integer", val_kind="int64")>>
  end module lazy_segment_tree_m
#+end_src
*** lazy_segment_tree の型宣言
#+name: declaration-lazy_segment_tree
#+begin_src fortran :exports code
  public :: ${lazy_segment_tree}
  public :: ${monoid_op}
  type :: ${lazy_segment_tree}
     private
     integer(int32) :: num_elems_, arr_size_, tree_size_, depth_, idx_range_left_, idx_range_right_
     ${val}, allocatable :: arr_(:)
     ${lazy}, allocatable :: lazy_(:)
     logical, allocatable :: is_lazy_(:)
     class(${monoid_op}), allocatable :: monoid_
   contains
     procedure, pass :: init_${lazy_segment_tree}
     procedure, pass :: init_by_arr_${lazy_segment_tree}
     generic :: init => &
          init_${lazy_segment_tree}, &
          init_by_arr_${lazy_segment_tree}
     procedure, pass :: dump => &
          dump_${lazy_segment_tree}
     procedure, pass :: unsafe_set => &
          unsafe_set_${lazy_segment_tree}
     procedure, pass :: unsafe_bottomup_update => &
          unsafe_bottomup_update_${lazy_segment_tree}
     procedure, pass :: strict_propagate_all => &
          strict_propagate_all_${lazy_segment_tree}
     procedure, pass, private :: strict_propagate_all_sub => &
          strict_propagate_all_sub_${lazy_segment_tree}
     procedure, pass :: update => &
          update_${lazy_segment_tree}
     procedure, pass, private :: update_sub => &
          update_sub_${lazy_segment_tree}
     procedure, pass :: query => &
          query_${lazy_segment_tree}
     procedure, pass, private :: eval_and_propagate => &
          eval_and_propagate_${lazy_segment_tree}
  end type ${lazy_segment_tree}
  type, abstract :: ${monoid_op}
     private
   contains
     procedure(identity_${val_kind}) , nopass, deferred :: identity
     procedure(bin_op_${val_kind})   , nopass, deferred :: bin_op
     procedure(mapping_${val_kind})  , nopass, deferred :: mapping
     procedure(composite_${val_kind}), nopass, deferred :: composite
  end type ${monoid_op}
  abstract interface
     pure ${val} function identity_${val_kind}() result(res)
       ${val_import}
     end function identity_${val_kind}
     pure ${val} function bin_op_${val_kind}(x, y) result(res)
       ${val_import}
       ${val}, intent(in) :: x, y
     end function bin_op_${val_kind}
     pure ${val} function mapping_${val_kind}(v, c, length) result(res)
       ${val_import}
       ${val}, intent(in) :: v
       ${lazy}, intent(in) :: c
       integer(4), intent(in) :: length
     end function mapping_${val_kind}
     pure ${val} function composite_${val_kind}(c_first, c_second) result(res)
       ${val_import}
       ${lazy}, intent(in) :: c_first, c_second
     end function composite_${val_kind}
  end interface
#+end_src
*** lazy_segment_tree の実装
:PROPERTIES:
:header-args: :noweb-ref procedures-lazy_segment_tree
:END:
**** メソッド
***** initializer
#+begin_src fortran :exports code :noweb no-export
  !> indices rage [1:2^a-1]
  !> init_${lazy_segment_tree}: Initialize ${lazy_segment_tree} with `num_elems` and monoid
  pure subroutine init_${lazy_segment_tree}(this, num_elems, monoid)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: num_elems
    class(${monoid_op}), intent(in) :: monoid
    integer(int32) :: tree_size
    allocate(this%monoid_, source = monoid)
    tree_size = 1
    this%depth_ = 1
    do while (tree_size < num_elems)
       tree_size = tree_size * 2
       this%depth_ = this%depth_ + 1
    end do
    this%tree_size_ = tree_size
    this%arr_size_ = 2 * tree_size - 1
    this%num_elems_ = num_elems
    this%idx_range_left_  = 1
    this%idx_range_right_ = tree_size
    allocate(this%arr_(this%arr_size_), source = this%monoid_%identity())
    allocate(this%lazy_(this%arr_size_))
    allocate(this%is_lazy_(this%arr_size_), source = .false.)
  end subroutine init_${lazy_segment_tree}
  !> init_by_arr_${lazy_segment_tree}: Initialize lazy segment tree by array.
  pure subroutine init_by_arr_${lazy_segment_tree}(this, arr, monoid)
    class(${lazy_segment_tree}), intent(inout) :: this
    ${val}, intent(in) :: arr(:)
    class(${monoid_op}), intent(in) :: monoid
    integer(int32) :: i
    call this%init(size(arr), monoid)
    do i = 1, size(arr)
       this%arr_(i + this%tree_size_ - 1) = arr(i)
    end do
    call this%strict_propagate_all()
  end subroutine init_by_arr_${lazy_segment_tree}

  !> unsafe_set_${lazy_segment_tree}: Set value into the node of leaf of tree.
  pure subroutine unsafe_set_${lazy_segment_tree}(this, idx, val)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: idx
    ${val}, intent(in) :: val
    this%arr_(this%tree_size_ + idx - 1) = val
  end subroutine unsafe_set_${lazy_segment_tree}
  !> unsafe_set_${lazy_segment_tree}: Update all node.
  pure subroutine unsafe_bottomup_update_${lazy_segment_tree}(this)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32) :: i
    do i = this%tree_size_ - 1, 1, -1
       this%arr_(i) = this%monoid_%bin_op(this%arr_(2 * i), this%arr_(2 * i + 1))
    end do
    this%is_lazy_(:) = .false.
  end subroutine unsafe_bottomup_update_${lazy_segment_tree}

  !> strict_propagate_all_${lazy_segment_tree}: Update all node.
  pure subroutine strict_propagate_all_${lazy_segment_tree}(this)
    class(${lazy_segment_tree}), intent(inout) :: this
    call this%strict_propagate_all_sub(1, this%idx_range_left_, this%idx_range_right_)
  end subroutine strict_propagate_all_${lazy_segment_tree}
  pure recursive subroutine strict_propagate_all_sub_${lazy_segment_tree}(this, idx, l, r)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: idx, l, r
    call this%eval_and_propagate(idx, r - l + 1)
    if (l == r) return
    call this%strict_propagate_all_sub(2 * idx,                   l, (l + r) / 2)
    call this%strict_propagate_all_sub(2 * idx + 1, (l + r + 1) / 2, r)
    this%arr_(idx) = this%monoid_%bin_op(this%arr_(2 * idx), this%arr_(2 * idx + 1))
  end subroutine strict_propagate_all_sub_${lazy_segment_tree}

  !> update_${lazy_segment_tree}: Update tree by `val`.
  !> [a, b]: Range to update.
  !> val: Value of update.
  pure subroutine update_${lazy_segment_tree}(this, a, b, val)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: a, b
    ${val}, intent(in) :: val
    if (a > b) error stop "Illegal range of a > b."
    call this%update_sub(a, b, val, 1, this%idx_range_left_, this%idx_range_right_)
  end subroutine update_${lazy_segment_tree}
  !> update_sub_${lazy_segment_tree}: Update tree by `val`.
  !> [a, b]: Range to update.
  !> val: Value of update.
  !> idx: Index of tree.
  !> [l, r]: Range of current node of tree.
  pure recursive subroutine update_sub_${lazy_segment_tree}(this, a, b, val, idx, l, r)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: a, b, idx, l, r
    ${val}, intent(in) :: val
    ! write(error_unit, '(a, *(i0, 1x))') "update_sub: ", a, b, l, r, idx
    if (a <= l .and. r <= b) then !> [a, b] に [l, r]が内包.
       if (this%is_lazy_(idx)) then
          this%lazy_(idx) = this%monoid_%composite(this%lazy_(idx), val)
       else
          this%lazy_(idx) = val
          this%is_lazy_(idx) = .true.
       end if
       call this%eval_and_propagate(idx, r - l + 1)
       return
    end if
    call this%eval_and_propagate(idx, r - l + 1)
    if (r < a .or. b < l) return !> r < [a, b] or [a, b] < l
    !> 一部が [a, b]に入っている.
    call this%update_sub(a, b, val, 2 * idx,                   l, (l + r) / 2)
    call this%update_sub(a, b, val, 2 * idx + 1, (l + r + 1) / 2, r)
    this%arr_(idx) = this%monoid_%bin_op(this%arr_(2 * idx), this%arr_(2 * idx + 1))
  end subroutine update_sub_${lazy_segment_tree}

  ! 閉区間[a, b]で操作.
  impure ${val} function query_${lazy_segment_tree} (this, a, b) result(query)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: a, b
    if (a > b) error stop "Illegal range of a > b."
    query = query_sub(1, this%idx_range_left_, this%idx_range_right_)
  contains
    impure recursive ${val} function query_sub(idx, l, r) result(res)
      integer(int32), intent(in) :: idx, l, r
      ${val} :: val_l, val_r
      ! write(error_unit, '(a, *(i0, 1x))') "query_sub: ", a, b, l, r
      call this%eval_and_propagate(idx, r - l + 1)
      res = this%monoid_%identity()
      if (r < a .or. b < l) return !> r < [a, b] or [a, b] < l
      if (a <= l .and. r <= b) then !> [a, b] に [l, r]が内包.
         res = this%arr_(idx)
         return
      else !> l in [a, b] or r in [a, b]
         !> [l, r] -> [l, (l + r) / 2], [(l + r + 1) / 2, r]
         val_l = query_sub(2 * idx,                   l, (l + r) / 2)
         val_r = query_sub(2 * idx + 1, (l + r + 1) / 2, r)
         res = this%monoid_%bin_op(val_l, val_r)
      end if
    end function query_sub
  end function query_${lazy_segment_tree}
  !> eval_and_propagate_${lazy_segment_tree}: Treat lazy propagation.
  !> idx: Index of node of tree.
  !> length: Length of range of node.
  pure subroutine eval_and_propagate_${lazy_segment_tree}(this, idx, length)
    class(${lazy_segment_tree}), intent(inout) :: this
    integer(int32), intent(in) :: idx, length
    ! write(error_unit, '(a, L, *(1x, i0))') "eval_and_propagate: ", this%is_lazy_(idx) &
    !      , idx, this%arr_(idx), this%lazy_(idx), length, this%monoid_%mapping(this%arr_(idx), this%lazy_(idx), length)
    if (.not. this%is_lazy_(idx)) return
    this%arr_(idx) = this%monoid_%mapping(this%arr_(idx), this%lazy_(idx), length)
    this%is_lazy_(idx) = .false.
    if (2 * idx > this%arr_size_) return
    if (this%is_lazy_(2 * idx)) then
       this%lazy_(2 * idx) = this%monoid_%composite(this%lazy_(2 * idx), this%lazy_(idx))
    else
       this%lazy_(2 * idx) = this%lazy_(idx)
       this%is_lazy_(2 * idx) = .true.
    end if
    if (this%is_lazy_(2 * idx + 1)) then
       this%lazy_(2 * idx + 1) = this%monoid_%composite(this%lazy_(2 * idx + 1), this%lazy_(idx))
    else
       this%lazy_(2 * idx + 1) = this%lazy_(idx)
       this%is_lazy_(2 * idx + 1) = .true.
    end if
  end subroutine eval_and_propagate_${lazy_segment_tree}

  subroutine dump_${lazy_segment_tree}(this)
    class(${lazy_segment_tree}), intent(in) :: this
    integer(int32) :: i
    write(error_unit, '(a)') "tree: "
    do i = 1, this%depth_
       write(error_unit, '(g0, ": ", *(g0, 1x))') i, this%arr_(2**(i-1):2**i-1)
    end do
    write(error_unit, '(a)') "lazy tree: "
    do i = 1, this%depth_
       write(error_unit, '(g0, ": ", *(g0, 1x))') i, this%lazy_(2**(i-1):2**i-1)
    end do
    write(error_unit, '(a)') "is_lazy?: "
    do i = 1, this%depth_
       write(error_unit, '(g0, ": ", *(L, 1x))') i, this%is_lazy_(2**(i-1):2**i-1)
    end do
  end subroutine dump_${lazy_segment_tree}
#+end_src
*** monoid_op (sum, min, max) の型宣言
#+name: declaration-monoid_op
#+begin_src fortran :exports code
  public :: sum_assign_${op_suffix}, sum_add_${op_suffix}, sum_mul_${op_suffix}
  public :: min_assign_${op_suffix}, min_add_${op_suffix}
  public :: max_assign_${op_suffix}, max_add_${op_suffix}
  type, extends(${monoid_op}) :: sum_assign_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_sum_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_sum_${op_suffix}
     procedure, nopass :: mapping   => mapping_sum_assign_${op_suffix}
     procedure, nopass :: composite => composite_sum_assign_${op_suffix}
  end type sum_assign_${op_suffix}
  type, extends(${monoid_op}) :: sum_add_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_sum_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_sum_${op_suffix}
     procedure, nopass :: mapping   => mapping_sum_add_${op_suffix}
     procedure, nopass :: composite => composite_sum_add_${op_suffix}
  end type sum_add_${op_suffix}
  type, extends(${monoid_op}) :: sum_mul_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_sum_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_sum_${op_suffix}
     procedure, nopass :: mapping   => mapping_sum_mul_${op_suffix}
     procedure, nopass :: composite => composite_sum_mul_${op_suffix}
  end type sum_mul_${op_suffix}

  type, extends(${monoid_op}) :: min_assign_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_min_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_min_${op_suffix}
     procedure, nopass :: mapping   => mapping_min_assign_${op_suffix}
     procedure, nopass :: composite => composite_min_assign_${op_suffix}
  end type min_assign_${op_suffix}
  type, extends(${monoid_op}) :: min_add_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_min_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_min_${op_suffix}
     procedure, nopass :: mapping   => mapping_min_add_${op_suffix}
     procedure, nopass :: composite => composite_min_add_${op_suffix}
  end type min_add_${op_suffix}

  type, extends(${monoid_op}) :: max_assign_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_max_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_max_${op_suffix}
     procedure, nopass :: mapping   => mapping_max_assign_${op_suffix}
     procedure, nopass :: composite => composite_max_assign_${op_suffix}
  end type max_assign_${op_suffix}
  type, extends(${monoid_op}) :: max_add_${op_suffix}
     private
   contains
     procedure, nopass :: identity => identity_max_${op_suffix}
     procedure, nopass :: bin_op   => bin_op_max_${op_suffix}
     procedure, nopass :: mapping   => mapping_max_add_${op_suffix}
     procedure, nopass :: composite => composite_max_add_${op_suffix}
  end type max_add_${op_suffix}
#+end_src
*** monoid_op (sum, min, max) の実装
:PROPERTIES:
:header-args: :noweb-ref procedures-monoid_op
:END:
**** メソッド
#+begin_src fortran
  pure ${val} function identity_sum_${op_suffix}() result(res)
    res = 0_${val_kind}
  end function identity_sum_${op_suffix}
  pure ${val} function bin_op_sum_${op_suffix}(x, y) result(res)
    ${val}, intent(in) :: x, y
    res = x + y
  end function bin_op_sum_${op_suffix}
  pure ${val} function mapping_sum_assign_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = c * length
  end function mapping_sum_assign_${op_suffix}
  pure ${val} function composite_sum_assign_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_second
  end function composite_sum_assign_${op_suffix}
  pure ${val} function mapping_sum_add_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = v + c * length
  end function mapping_sum_add_${op_suffix}
  pure ${val} function composite_sum_add_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_first + c_second
  end function composite_sum_add_${op_suffix}
  pure ${val} function mapping_sum_mul_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = v * c
  end function mapping_sum_mul_${op_suffix}
  pure ${val} function composite_sum_mul_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_first + c_second
  end function composite_sum_mul_${op_suffix}

  pure ${val} function identity_min_${op_suffix}() result(res)
    res = huge(0_${val_kind})
  end function identity_min_${op_suffix}
  pure ${val} function bin_op_min_${op_suffix}(x, y) result(res)
    ${val}, intent(in) :: x, y
    res = min(x, y)
  end function bin_op_min_${op_suffix}
  pure ${val} function mapping_min_assign_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = c
  end function mapping_min_assign_${op_suffix}
  pure ${val} function composite_min_assign_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_second
  end function composite_min_assign_${op_suffix}
  pure ${val} function mapping_min_add_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = v + c
  end function mapping_min_add_${op_suffix}
  pure ${val} function composite_min_add_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_first + c_second
  end function composite_min_add_${op_suffix}

  pure ${val} function identity_max_${op_suffix}() result(res)
    res = -huge(0_${val_kind})-1
  end function identity_max_${op_suffix}
  pure ${val} function bin_op_max_${op_suffix}(x, y) result(res)
    ${val}, intent(in) :: x, y
    res = max(x, y)
  end function bin_op_max_${op_suffix}
  pure ${val} function mapping_max_assign_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = c
  end function mapping_max_assign_${op_suffix}
  pure ${val} function composite_max_assign_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_second
  end function composite_max_assign_${op_suffix}
  pure ${val} function mapping_max_add_${op_suffix}(v, c, length) result(res)
    ${val}, intent(in) :: v, c
    integer(4), intent(in) :: length
    res = v + c
  end function mapping_max_add_${op_suffix}
  pure ${val} function composite_max_add_${op_suffix}(c_first, c_second) result(res)
    ${val}, intent(in) :: c_first, c_second
    res = c_first + c_second
  end function composite_max_add_${op_suffix}
#+end_src
*** lazy_segment_tree の展開
**** 変数の宣言
#+name: lazy_segment_tree-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  case "${val_base}" in
      "character")
          val="character(${val_kind})"
          suffix="character${val_kind}"
          ;;
      "type")
          val="type(${val_kind})"
          suffix="${val_kind}"
          val_import="import ${val_kind}"
          ;;
      ,*)
          val="${val_base}(${val_kind})"
          suffix="${val_kind}"
          val_import="import ${val_kind}"
          ;;
  esac
  lazy_segment_tree="lazy_segment_tree_${suffix}"
  monoid_op="monoid_op_${suffix}"
#+end_src
**** 宣言の展開
#+name: declaration-lazy_segment_tree-var
#+begin_src bash :exports code :var val_base="integer" val_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<lazy_segment_tree-var>>
  cat <<EOF
  <<declaration-lazy_segment_tree>>
  EOF
#+end_src

#+RESULTS: declaration-lazy_segment_tree-var
#+begin_example
integer
public ::
public ::
type ::
   private
   integer(int32) :: num_elems_, arr_size_, tree_size_, depth_, idx_range_left_, idx_range_right_
   , allocatable :: arr_(:), lazy_(:)
   logical, allocatable :: is_lazy_(:)
   class(), allocatable :: monoid_
 contains
   procedure, pass :: init_
   procedure, pass :: init_by_arr_
   generic :: init => &
        init_, &
        init_by_arr_
   procedure, pass :: dump => &
        dump_
   procedure, pass :: unsafe_set => &
        unsafe_set_
   procedure, pass :: unsafe_bottomup_update => &
        unsafe_bottomup_update_
   procedure, pass :: strict_propagate_all => &
        strict_propagate_all_
   procedure, pass, private :: strict_propagate_all_sub => &
        strict_propagate_all_sub_
   procedure, pass :: update => &
        update_
   procedure, pass, private :: update_sub => &
        update_sub_
   procedure, pass :: query => &
        query_
   procedure, pass, private :: eval_and_propagate => &
        eval_and_propagate_
end type
type, abstract ::
   private
 contains
   procedure(identity_int32) , nopass, deferred :: identity
   procedure(bin_op_int32)   , nopass, deferred :: bin_op
   procedure(mapping_int32)  , nopass, deferred :: mapping
   procedure(composite_int32), nopass, deferred :: composite
end type
abstract interface
   pure  function identity_int32() result(res)

   end function identity_int32
   pure  function bin_op_int32(x, y) result(res)

     , intent(in) :: x, y
   end function bin_op_int32
   pure  function mapping_int32(v, c, length) result(res)

     , intent(in) :: v, c
     integer(4), intent(in) :: length
   end function mapping_int32
   pure  function composite_int32(c_first, c_second) result(res)

     , intent(in) :: c_first, c_second
   end function composite_int32
end interface
#+end_example

#+name: procedures-lazy_segment_tree-var
#+begin_src bash :exports code :var val_base="integer" val_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<lazy_segment_tree-var>>
  cat <<EOF
  <<procedures-lazy_segment_tree>>
  EOF
#+end_src
*** monoid_op の展開
**** 変数の宣言
#+name: monoid_op-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  case "${val_base}" in
      "character")
          val="character(${val_kind})"
          suffix="character${val_kind}"
          ;;
      "type")
          val="type(${val_kind})"
          suffix="${val_kind}"
          ;;
      ,*)
          val="${val_base}(${val_kind})"
          suffix="${val_kind}"
          ;;
  esac
  monoid_op="monoid_op_${suffix}"
  op_suffix="${suffix}_op"
#+end_src
**** 宣言の展開
#+name: declaration-monoid_op-var
#+begin_src bash :exports code :var val_base="integer" val_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<monoid_op-var>>
  cat <<EOF
  <<declaration-monoid_op>>
  EOF
#+end_src
#+name: procedures-monoid_op-var
#+begin_src bash :exports code :var val_base="integer" val_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<monoid_op-var>>
  cat <<EOF
  <<procedures-monoid_op>>
  EOF
#+end_src
** COMMENT hi
#+begin_src fortran
  module lazy_segment_tree_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    public :: lazy_segment_tree
    public :: monoid_op
    public :: sum_assign_int32_op, sum_add_int32_op, sum_mul_int32_op
    public :: min_assign_int32_op, min_add_int32_op
    public :: max_assign_int32_op, max_add_int32_op
    type :: lazy_segment_tree
       private
       integer(int32) :: num_elems_, arr_size_, tree_size_, depth_, idx_range_left_, idx_range_right_
       integer(int32), allocatable :: arr_(:), lazy_(:)
       logical, allocatable :: is_lazy_(:)
       class(monoid_op), allocatable :: monoid_
     contains
       procedure, pass :: init_segment_tree, init_by_arr_segment_tree
       generic :: init => init_segment_tree, init_by_arr_segment_tree
       procedure, pass :: dump   => dump_segment_tree
       procedure, pass :: unsafe_set => unsafe_set_lazy_segment_tree
       procedure, pass :: unsafe_bottomup_update => unsafe_bottomup_update_lazy_segment_tree
       procedure, pass :: strict_propagate_all => strict_propagate_all_lazy_segment_tree
       procedure, pass, private :: strict_propagate_all_sub => strict_propagate_all_sub_lazy_segment_tree
       procedure, pass :: update => update_lazy_segment_tree
       procedure, pass, private :: update_sub => update_sub_lazy_segment_tree
       procedure, pass :: query => query_lazy_segment_tree
       procedure, pass, private :: eval_and_propagate => eval_and_propagate_lazy_segment_tree
    end type lazy_segment_tree
    type, abstract :: monoid_op
       private
     contains
       procedure(identity_int32) , nopass, deferred :: identity
       procedure(bin_op_int32)   , nopass, deferred :: bin_op
       procedure(mapping_int32)  , nopass, deferred :: mapping
       procedure(composite_int32), nopass, deferred :: composite
    end type monoid_op
    abstract interface
       pure integer(int32) function identity_int32() result(res)
         import int32
       end function identity_int32
       pure integer(int32) function bin_op_int32(x, y) result(res)
         import int32
         integer(int32), intent(in) :: x, y
       end function bin_op_int32
       pure integer(int32) function mapping_int32(v, c, length) result(res)
         import int32
         integer(int32), intent(in) :: v, c
         integer(int32), intent(in) :: length
       end function mapping_int32
       pure integer(int32) function composite_int32(c_first, c_second) result(res)
         import int32
         integer(int32), intent(in) :: c_first, c_second
       end function composite_int32
    end interface

    type, extends(monoid_op) :: sum_assign_int32_op
       private
     contains
       procedure, nopass :: identity => identity_sum_int32_op
       procedure, nopass :: bin_op   => bin_op_sum_int32_op
       procedure, nopass :: mapping   => mapping_sum_assign_int32_op
       procedure, nopass :: composite => composite_sum_assign_int32_op
    end type sum_assign_int32_op
    type, extends(monoid_op) :: sum_add_int32_op
       private
     contains
       procedure, nopass :: identity => identity_sum_int32_op
       procedure, nopass :: bin_op   => bin_op_sum_int32_op
       procedure, nopass :: mapping   => mapping_sum_add_int32_op
       procedure, nopass :: composite => composite_sum_add_int32_op
    end type sum_add_int32_op
    type, extends(monoid_op) :: sum_mul_int32_op
       private
     contains
       procedure, nopass :: identity => identity_sum_int32_op
       procedure, nopass :: bin_op   => bin_op_sum_int32_op
       procedure, nopass :: mapping   => mapping_sum_mul_int32_op
       procedure, nopass :: composite => composite_sum_mul_int32_op
    end type sum_mul_int32_op

    type, extends(monoid_op) :: min_assign_int32_op
       private
     contains
       procedure, nopass :: identity => identity_min_int32_op
       procedure, nopass :: bin_op   => bin_op_min_int32_op
       procedure, nopass :: mapping   => mapping_min_assign_int32_op
       procedure, nopass :: composite => composite_min_assign_int32_op
    end type min_assign_int32_op
    type, extends(monoid_op) :: min_add_int32_op
       private
     contains
       procedure, nopass :: identity => identity_min_int32_op
       procedure, nopass :: bin_op   => bin_op_min_int32_op
       procedure, nopass :: mapping   => mapping_min_add_int32_op
       procedure, nopass :: composite => composite_min_add_int32_op
    end type min_add_int32_op

    type, extends(monoid_op) :: max_assign_int32_op
       private
     contains
       procedure, nopass :: identity => identity_max_int32_op
       procedure, nopass :: bin_op   => bin_op_max_int32_op
       procedure, nopass :: mapping   => mapping_max_assign_int32_op
       procedure, nopass :: composite => composite_max_assign_int32_op
    end type max_assign_int32_op
    type, extends(monoid_op) :: max_add_int32_op
       private
     contains
       procedure, nopass :: identity => identity_max_int32_op
       procedure, nopass :: bin_op   => bin_op_max_int32_op
       procedure, nopass :: mapping   => mapping_max_add_int32_op
       procedure, nopass :: composite => composite_max_add_int32_op
    end type max_add_int32_op
  contains
    !> indices rage [1:2^a-1]
    pure subroutine init_segment_tree (this, num_elems, monoid)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: num_elems
      class(monoid_op), intent(in) :: monoid
      integer(int32) :: tree_size
      allocate(this%monoid_, source = monoid)
      tree_size = 1
      this%depth_ = 1
      do while (tree_size < num_elems)
         tree_size = tree_size * 2
         this%depth_ = this%depth_ + 1
      end do
      this%tree_size_ = tree_size
      this%arr_size_ = 2 * tree_size - 1
      this%num_elems_ = num_elems
      this%idx_range_left_  = 1
      this%idx_range_right_ = tree_size
      allocate(this%arr_(this%arr_size_), source = this%monoid_%identity())
      allocate(this%lazy_(this%arr_size_))
      allocate(this%is_lazy_(this%arr_size_), source = .false.)
    end subroutine init_segment_tree
    !> init_by_arr_segment_tree: Initialize lazy segment tree by array.
    pure subroutine init_by_arr_segment_tree (this, arr, monoid)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: arr(:)
      class(monoid_op), intent(in) :: monoid
      integer(int32) :: i
      call this%init(size(arr), monoid)
      do i = 1, size(arr)
         this%arr_(i + this%tree_size_ - 1) = arr(i)
      end do
      call this%strict_propagate_all()
    end subroutine init_by_arr_segment_tree

    !> unsafe_set_lazy_segment_tree: Set value into the node of leaf of tree.
    pure subroutine unsafe_set_lazy_segment_tree(this, idx, val)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: idx
      integer(int32), intent(in) :: val
      this%arr_(this%tree_size_ + idx - 1) = val
    end subroutine unsafe_set_lazy_segment_tree
    !> unsafe_set_lazy_segment_tree: Update all node.
    pure subroutine unsafe_bottomup_update_lazy_segment_tree(this)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32) :: i
      do i = this%tree_size_ - 1, 1, -1
         this%arr_(i) = this%monoid_%bin_op(this%arr_(2 * i), this%arr_(2 * i + 1))
      end do
      this%is_lazy_(:) = .false.
    end subroutine unsafe_bottomup_update_lazy_segment_tree

    !> strict_propagate_all_lazy_segment_tree: Update all node.
    pure subroutine strict_propagate_all_lazy_segment_tree(this)
      class(lazy_segment_tree), intent(inout) :: this
      call this%strict_propagate_all_sub(1, this%idx_range_left_, this%idx_range_right_)
    end subroutine strict_propagate_all_lazy_segment_tree
    pure recursive subroutine strict_propagate_all_sub_lazy_segment_tree(this, idx, l, r)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: idx, l, r
      call this%eval_and_propagate(idx, r - l + 1)
      if (l == r) return
      call this%strict_propagate_all_sub(2 * idx,                   l, (l + r) / 2)
      call this%strict_propagate_all_sub(2 * idx + 1, (l + r + 1) / 2, r)
      this%arr_(idx) = this%monoid_%bin_op(this%arr_(2 * idx), this%arr_(2 * idx + 1))
    end subroutine strict_propagate_all_sub_lazy_segment_tree

    !> update_lazy_segment_tree: Update tree by `val`.
    !> [a, b]: Range to update.
    !> val: Value of update.
    pure subroutine update_lazy_segment_tree(this, a, b, val)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: a, b
      integer(int32), intent(in) :: val
      if (a > b) error stop "Illegal range of a > b."
      call this%update_sub(a, b, val, 1, this%idx_range_left_, this%idx_range_right_)
    end subroutine update_lazy_segment_tree
    !> update_sub_lazy_segment_tree: Update tree by `val`.
    !> [a, b]: Range to update.
    !> val: Value of update.
    !> idx: Index of tree.
    !> [l, r]: Range of current node of tree.
    pure recursive subroutine update_sub_lazy_segment_tree(this, a, b, val, idx, l, r)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: a, b, idx, l, r
      integer(int32), intent(in) :: val
      ! write(error_unit, '(a, *(i0, 1x))') "update_sub: ", a, b, l, r, idx
      if (a <= l .and. r <= b) then !> [a, b] に [l, r]が内包.
         if (this%is_lazy_(idx)) then
            this%lazy_(idx) = this%monoid_%composite(this%lazy_(idx), val)
         else
            this%lazy_(idx) = val
            this%is_lazy_(idx) = .true.
         end if
         call this%eval_and_propagate(idx, r - l + 1)
         return
      end if
      call this%eval_and_propagate(idx, r - l + 1)
      if (r < a .or. b < l) return !> r < [a, b] or [a, b] < l
      !> 一部が [a, b]に入っている.
      call this%update_sub(a, b, val, 2 * idx,                   l, (l + r) / 2)
      call this%update_sub(a, b, val, 2 * idx + 1, (l + r + 1) / 2, r)
      this%arr_(idx) = this%monoid_%bin_op(this%arr_(2 * idx), this%arr_(2 * idx + 1))
    end subroutine update_sub_lazy_segment_tree

    ! 閉区間[a, b]で操作.
    impure integer(int32) function query_lazy_segment_tree (this, a, b) result(query)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: a, b
      if (a > b) error stop "Illegal range of a > b."
      query = query_sub(1, this%idx_range_left_, this%idx_range_right_)
    contains
      impure recursive integer(int32) function query_sub(idx, l, r) result(res)
        integer(int32), intent(in) :: idx, l, r
        integer(int32) :: val_l, val_r
        ! write(error_unit, '(a, *(i0, 1x))') "query_sub: ", a, b, l, r
        call this%eval_and_propagate(idx, r - l + 1)
        res = this%monoid_%identity()
        if (r < a .or. b < l) return !> r < [a, b] or [a, b] < l
        if (a <= l .and. r <= b) then !> [a, b] に [l, r]が内包.
           res = this%arr_(idx)
           return
        else !> l in [a, b] or r in [a, b]
           !> [l, r] -> [l, (l + r) / 2], [(l + r + 1) / 2, r]
           val_l = query_sub(2 * idx,                   l, (l + r) / 2)
           val_r = query_sub(2 * idx + 1, (l + r + 1) / 2, r)
           res = this%monoid_%bin_op(val_l, val_r)
        end if
      end function query_sub
    end function query_lazy_segment_tree
    !> eval_and_propagate_lazy_segment_tree: Treat lazy propagation.
    !> idx: Index of node of tree.
    !> length: Length of range of node.
    pure subroutine eval_and_propagate_lazy_segment_tree(this, idx, length)
      class(lazy_segment_tree), intent(inout) :: this
      integer(int32), intent(in) :: idx, length
      ! write(error_unit, '(a, L, *(1x, i0))') "eval_and_propagate: ", this%is_lazy_(idx) &
      !      , idx, this%arr_(idx), this%lazy_(idx), length, this%monoid_%mapping(this%arr_(idx), this%lazy_(idx), length)
      if (.not. this%is_lazy_(idx)) return
      this%arr_(idx) = this%monoid_%mapping(this%arr_(idx), this%lazy_(idx), length)
      this%is_lazy_(idx) = .false.
      if (2 * idx > this%arr_size_) return
      if (this%is_lazy_(2 * idx)) then
         this%lazy_(2 * idx) = this%monoid_%composite(this%lazy_(2 * idx), this%lazy_(idx))
      else
         this%lazy_(2 * idx) = this%lazy_(idx)
         this%is_lazy_(2 * idx) = .true.
      end if
      if (this%is_lazy_(2 * idx + 1)) then
         this%lazy_(2 * idx + 1) = this%monoid_%composite(this%lazy_(2 * idx + 1), this%lazy_(idx))
      else
         this%lazy_(2 * idx + 1) = this%lazy_(idx)
         this%is_lazy_(2 * idx + 1) = .true.
      end if
    end subroutine eval_and_propagate_lazy_segment_tree

    subroutine dump_segment_tree(this)
      class(lazy_segment_tree), intent(in) :: this
      integer(int32) :: i
      write(error_unit, '(a)') "tree: "
      do i = 1, this%depth_
         write(error_unit, '(i0, ": ", *(i0, 1x))') i, this%arr_(2**(i-1):2**i-1)
      end do
      write(error_unit, '(a)') "lazy tree: "
      do i = 1, this%depth_
         write(error_unit, '(i0, ": ", *(i0, 1x))') i, this%lazy_(2**(i-1):2**i-1)
      end do
      write(error_unit, '(a)') "is_lazy?: "
      do i = 1, this%depth_
         write(error_unit, '(i0, ": ", *(L, 1x))') i, this%is_lazy_(2**(i-1):2**i-1)
      end do
    end subroutine dump_segment_tree
  end module lazy_segment_tree_m
#+end_src
** 遅延伝播セグメント木 zero_one_sequene
#+name： lazy_segment_tree_zero_one_sequene-module
#+begin_src fortran :exports code :tangle "lazy_segment_tree_zero_one_sequence_m.F90" :comment link :noweb no-export
  module lazy_segment_tree_zero_one_sequence_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    public :: zero_one_sequence
    type :: zero_one_sequence
       integer(int32) :: v_(7) = 0_int32
     contains
    end type zero_one_sequence
    <<declaration-lazy_segment_tree-var(val_base="type", val_kind="zero_one_sequence")>>
  contains
    <<procedures-lazy_segment_tree-var(val_base="type", val_kind="zero_one_sequence")>>
  end module lazy_segment_tree_zero_one_sequence_m
#+end_src
