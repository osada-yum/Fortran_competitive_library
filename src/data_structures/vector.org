** Vector (Variable array)
*** Unwrapped Vector
**** whole module of the unwrapped_vector
#+name: unwrapped_vector-module
#+begin_src fortran :exports code :tangle "unwrapped_vector_m.F90" :comment link :noweb no-export
  module unwrapped_vector_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    <<declaration-unwrapped_vector-var(type="integer", type_kind="int32")>>
    <<declaration-unwrapped_vector-var(type="integer", type_kind="int64")>>
    <<declaration-unwrapped_vector-var(type="real", type_kind="real32")>>
    <<declaration-unwrapped_vector-var(type="real", type_kind="real64")>>
    <<declaration-unwrapped_vector-var(type="character")>>
  contains
    <<procedures-unwrapped_vector-var(type="integer", type_kind="int32")>>
    <<procedures-unwrapped_vector-var(type="integer", type_kind="int64")>>
    <<procedures-unwrapped_vector-var(type="real", type_kind="real32")>>
    <<procedures-unwrapped_vector-var(type="real", type_kind="real64")>>
    <<procedures-unwrapped_vector-var(type="character")>>
  end module unwrapped_vector_m
#+end_src
**** declaration of the unwrapped_vector
First, We define the type of the unwrapped_vector.
These unwrapped_vectors are implemented by the array that shrink and expand.
The list can add new values, delete, and search some elements.
We can access the member ~arr_(:)~ directory, so we should take care of the consistency of data.

Variables like ${variable} are expanded by bash.
- ${uwvec} is the name of the type for the unwrapped vector .
- ${type} is the type of the
#+name: declaration-unwrapped_vector
#+begin_src fortran :exports code
  public :: ${uwvec}
  type :: ${uwvec}
     private
     ${type}, allocatable, public :: arr_(:)
     integer(int32) :: size_ = 0, capa_ = 0
   contains
     procedure, pass :: init      => init_${uwvec}
     procedure, pass :: with_capacity => with_capacity_${uwvec}
     procedure, pass :: push_back_${uwvec}, &
          push_back_array_${uwvec}
     generic         :: push_back => push_back_${uwvec}, &
          push_back_array_${uwvec}
     procedure, pass :: pop_back  => pop_back_${uwvec}
     procedure, pass :: back      => back_${uwvec}
     procedure, pass :: size   => size_${uwvec}
     procedure, pass :: resize => resize_${uwvec}
     procedure, pass :: lower_bound => lower_bound_${uwvec}
     procedure, pass :: upper_bound => upper_bound_${uwvec}
  end type ${uwvec}
  interface ${uwvec}
     module procedure :: construct_${uwvec}_by_size, &
          construct_${uwvec}_by_arr, &
          construct_${uwvec}_by_init_val
  end interface ${uwvec}
#+end_src
**** procedures of the unwrapped vector
:PROPERTIES:
:header-args: :noweb-ref procedures-unwrapped_vector
:END:
***** constructor
=function construct= constructs unwrapped_vector by size or value.
#+name: construct-unwrapped_vector
#+begin_src fortran :exports code
  !> construct_${uwvec}_by_size: Construct ${uwvec} by the size, the initial values is unknown.
  impure function construct_${uwvec}_by_size(size) result(res)
    type(${uwvec}) :: res
    integer(int32), intent(in) :: size
    call res%init(size)
  end function construct_${uwvec}_by_size
  !> construct_${uwvec}_by_arr: Construct ${uwvec} by the array of ${type}.
  impure function construct_${uwvec}_by_arr(arr) result(res)
    type(${uwvec}) :: res
    ${type}, intent(in) :: arr(:)
    integer(int32) :: n
    n = size(arr)
    call res%init(n)
    res%arr_(1:n) = arr(1:n)
  end function construct_${uwvec}_by_arr
  !> construct_${uwvec}_by_init_val: Construct ${uwvec} by size and the initial values.
  impure function construct_${uwvec}_by_init_val(size, val) result(res)
    type(${uwvec}) :: res
    integer(int32), intent(in) :: size
    ${type}, intent(in) :: val
    call res%init(size)
    res%arr_(1:size) = val
  end function construct_${uwvec}_by_init_val
#+end_src
***** init
=subroutine init= initialize unwrapped_vector by size.
#+name: init-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> init_${uwvec}: Initialize the ${uwvec} by size.
  subroutine init_${uwvec}(this, n)
    class(${uwvec}), intent(inout) :: this
    integer(int32), intent(in) :: n
    if (.not. allocated(this%arr_)) then
       allocate(this%arr_(n))
       this%size_ = n
       this%capa_ = n
    end if
  end subroutine init_${uwvec}
#+end_src
***** with_capacity
=subroutine with_capacity= initialize unwrapped_vector by size of capacity.
#+name: with_capacity-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> with_capacity_${uwvec}: Initialize the ${uwvec} by size.
  subroutine with_capacity_${uwvec}(this, n)
    class(${uwvec}), intent(inout) :: this
    integer(int32), intent(in) :: n
    if (.not. allocated(this%arr_)) then
       allocate(this%arr_(n))
       this%size_ = 0
       this%capa_ = n
    end if
  end subroutine with_capacity_${uwvec}
#+end_src
***** push_back
=subroutine push_back= insert value to the tail of elements of the unwrapped vector.
#+name: push_back-unwrapped_vector
#+begin_src fortran :exports code
  !> push_back_${uwvec}: Insert value to the tail of elements of the ${uwvec}.
  subroutine push_back_${uwvec}(this, val)
    class(${uwvec}), intent(inout) :: this
    ${type}, intent(in) :: val
    if (.not. allocated(this%arr_)) call this%with_capacity(1)
    if (this%size_ == this%capa_) then
       call this%resize(2*this%capa_)
    end if
    this%size_ = this%size_ + 1
    this%arr_(this%size_) = val
  end subroutine push_back_${uwvec}
  !> push_back_array_${uwvec}: Insert elemeents of array to the tail of elements of the ${uwvec}.
  subroutine push_back_array_${uwvec}(this, arr)
    class(${uwvec}), intent(inout) :: this
    ${type}, intent(in) :: arr(:)
    integer(int32) :: s
    s = size(arr)
    if (.not. allocated(this%arr_)) &
         call this%with_capacity(s)
    if (this%size_ + s > this%capa_) then
       call this%resize(this%size_ + s)
    end if
    this%arr_(this%size_+1:this%size_+s) = arr(:)
    this%size_ = this%size_ + s
  end subroutine push_back_array_${uwvec}
#+end_src
***** pop_back
=function pop_back= deletes the value in the end of arr_(:) of the unwrapped vector and returns it.
#+name: pop_back-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> pop_back_${uwvec}: Delete the value in the end of arr_(:) of the ${uwvec} and return it.
  ${type} function pop_back_${uwvec}(this)
    class(${uwvec}), intent(inout) :: this
    pop_back_${uwvec} = this%arr_(this%size_)
    this%size_ = this%size_ - 1
  end function pop_back_${uwvec}
#+end_src
***** back
=function back= returns the value in the end of arr_(:) of the unwrapped vector.
#+name: back-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> back_${uwvec}: Delete the value in the end of arr_(:) of the ${uwvec} and return it.
  ${type} function back_${uwvec}(this)
    class(${uwvec}), intent(inout) :: this
    back_${uwvec} = this%arr_(this%size_)
  end function back_${uwvec}
#+end_src
***** size
=function size= return current size of the unwrapped vector.
#+name: size-unwrapped_vector
#+begin_src fortran :exports code
  !> size_vector_${suffix}: Return current size of the ${uwvec}.
  pure integer(int32) function size_${uwvec}(this)
    class(${uwvec}), intent(in) :: this
    size_${uwvec} = this%size_
  end function size_${uwvec}
#+end_src
***** resize
=subroutine resize= shrinks or expands arr_(:) of the unwrapped vector.
#+name: resize-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> resize_${uwvec}: Shrink or expand arr_(:) of the ${uwvec}.
  subroutine resize_${uwvec}(this, resize)
    class(${uwvec}), intent(inout) :: this
    integer(int32), intent(in) :: resize
    ${type}, allocatable :: tmp(:)
    if (resize < 1) then
       this%size_ = 0
       allocate(tmp(1))
       call move_alloc(from = tmp, to = this%arr_)
       this%capa_ = 1
    else
       if (this%capa_ == resize) return
       allocate(tmp(resize))
       this%size_ = min(this%size_, resize)
       tmp(1:this%size_) = this%arr_(1:this%size_)
       call move_alloc(from = tmp, to = this%arr_)
       this%capa_ = resize
    end if
  end subroutine resize_${uwvec}
#+end_src
***** lower_bound
=function lower_bound= returns the minimum index that is higher than or equal to `val`.
#+name: lower_bonud-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> lower_bound_vector_${suffix}: Return the minimum index that is higher than or equal to 'val'.
  !> The elements in vector must be sorted.
  pure integer(int32) function lower_bound_${uwvec}(this, val) result(res)
    class(${uwvec}), intent(in) :: this
    ${type}, intent(in) :: val
    res = lower_bound(this%arr_(1:this%size()), 1, this%size(), val)
  contains
    <<../search/search.org:lower_bound_some_type_of_arr(type="${type}", purity="pure")>>
  end function lower_bound_${uwvec}
#+end_src
***** upper_bound
=function upper_bound= returns the minimum index that is higher than to `val`.
#+name: upper_bonud-unwrapped_vector
#+begin_src fortran :exports code :noweb no-export
  !> lower_bound_vector_${suffix}: Return the minimum index that is higher than or equal to 'val'.
  !> The elements in vector must be sorted.
  pure integer(int32) function upper_bound_${uwvec}(this, val) result(res)
    class(${uwvec}), intent(in) :: this
    ${type}, intent(in) :: val
    res = upper_bound(this%arr_(1:this%size()), 1, this%size(), val)
  contains
    <<../search/search.org:upper_bound_some_type_of_arr(type="${type}", purity="pure")>>
  end function upper_bound_${uwvec}
#+end_src
**** process definition and procedures of the vector
#+name: unwrapped_vector-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      "type")
          type="type(${type_kind})"
          suffix="${type_kind}"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  uwvec="unwrapped_vector_${suffix}"
#+end_src
#+name: declaration-unwrapped_vector-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<unwrapped_vector-var>>
  cat <<EOF
  <<declaration-unwrapped_vector>>
  EOF
#+end_src
#+name: procedures-unwrapped_vector-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<unwrapped_vector-var>>
  cat <<EOF
  <<procedures-unwrapped_vector>>
  EOF
#+end_src
**** test
***** test実行
#+name: test-unwrapped_vector
#+begin_src fortran :flags "-cpp -g -fbacktrace -fcheck=bounds" :exports code :results output :noweb no-export :cache yes
<<unwrapped_vector-module>>
<<unwrapped_vector-test>>
#+end_src

#+RESULTS[90824bd90ade5897171f2351b869dd3ec6669d58]: test-unwrapped_vector

***** test本体
#+name: unwrapped_vector-test
#+begin_src fortran :exports code :tangle "../../test/test_unwrapped_vector.F90" :noweb no-export
  program test_unwrapped_vector
    use, intrinsic :: iso_fortran_env
    use unwrapped_vector_m
    implicit none
    integer(int32) :: i, j
    integer(int32) :: ierr
    integer(int32), parameter :: n = 10, low = 5, high = low+n-1
    type(unwrapped_vector_int32) :: v, v2
    store:do i = 1, n
       call v%push_back(i)
       <<../Implementations.org:assert(cond="v%arr_(i) == i", code=10, message="Stored value in `v%arr_(i)` is illegal in loop.")>>
    end do store
    test_lower_bound:do i = 0, v%size()+1
       j = v%lower_bound(i)
       <<../Implementations.org:assert(cond="j == max(1, i)", code=11, message="Return value of `lower_bound` is illegal in loop.")>>
    end do test_lower_bound
    do i = 1, n
       j = v%pop_back()
    end do

    v2 = unwrapped_vector_int32(5)
    v2%arr_(:) = 1
    do i = 1, 5
       <<../Implementations.org:assert(cond="v2%arr_(i) == 1", code=20, message="Initialization by size of `v2` is illegal.")>>
    end do
    v2 = unwrapped_vector_int32([(i, i = 1,5)])
    do i = 1, 5
       <<../Implementations.org:assert(cond="v2%arr_(i) == i", code=21, message="Initialization by array of `v2` is illegal.")>>
    end do
    v2 = unwrapped_vector_int32(size = 5, val = 2)
    do i = 1, 5
       <<../Implementations.org:assert(cond="v2%arr_(i) == 2", code=22, message="Initialization by init_val of `v2` is illegal.")>>
    end do

    call v2%resize(0)
    do i = 1, 5
       call v2%push_back(i)
       <<../Implementations.org:assert(cond="v2%back() == i", code=23, message="Resize or back for `v2` is illegal.")>>
    end do
    block
      type(unwrapped_vector_int32) :: v3
      integer(int32) :: arr(5)
      arr(:) = [(i, i = 1, size(arr))]
      arr(4) = 3
      call v3%push_back(arr)
      <<../Implementations.org:assert(cond="all(v3%arr_(1:v3%size()) == arr(:))", code=24, message="push_back_arr for `v3` is illegal.")>>
      <<../Implementations.org:assert(cond="v3%lower_bound(arr(3)) == 3", code=25, message="lower_bound for `v3` is illegal.")>>
      <<../Implementations.org:assert(cond="v3%upper_bound(arr(3)) == 5", code=26, message="upper_bound for `v3` is illegal.")>>
    end block
  end program test_unwrapped_vector
#+end_src
*** COMMENT wrapped Vector
**** whole module of the vector
#+name: vector-module
#+begin_src fortran :exports code :tangle "vector_m.F90" :comment link :noweb no-export
  module vector_m
    use, intrinsic :: iso_fortran_env
    use unwrapped_vector_m
    implicit none
    private
  <<declaration-vector-var(type="integer", type_kind="int32")>>
  <<declaration-vector-var(type="integer", type_kind="int64")>>
  <<declaration-vector-var(type="real", type_kind="real32")>>
  <<declaration-vector-var(type="real", type_kind="real64")>>
  <<declaration-vector-var(type="character")>>
  contains
  <<procedures-vector-var(type="integer", type_kind="int32")>>
  <<procedures-vector-var(type="integer", type_kind="int64")>>
  <<procedures-vector-var(type="real", type_kind="real32")>>
  <<procedures-vector-var(type="real", type_kind="real64")>>
  <<procedures-vector-var(type="character")>>
  end module vector_m
#+end_src
**** declaration of the vector
First, We define type of the vector.
These vectors are implemented by the array that shrink and expand.
The list can add new values, delete, and search some elements.

Variables like ${variable} are expanded by bash.
- ${type} is type of elements in the list.
#+name: declaration-vector
#+begin_src fortran :exports code
  public :: ${vec}
  type :: ${vec}
     private
     ${uwvec} :: uwvec_
   contains
     procedure, pass :: init_vector_${suffix}, init_vector_range_${suffix}
     generic         :: init      => init_vector_${suffix}, init_vector_range_${suffix}
     procedure, pass :: push_back_vector_${suffix}, push_back_array_vector_${suffix}
     generic         :: push_back => push_back_vector_${suffix}, push_back_array_vector_${suffix}
     procedure, pass :: pop_back  => pop_back_vector_${suffix}
     procedure, pass :: size      => size_vector_${suffix}
     procedure, pass :: lbound    => lbound_vector_${suffix}
     procedure, pass :: ubound    => ubound_vector_${suffix}
     procedure, pass :: resize_vector_${suffix}, resize_vector_range_${suffix}
     generic         :: resize    => resize_vector_${suffix}, resize_vector_range_${suffix}
     procedure, pass :: at        => at_vector_${suffix}
     procedure, pass :: replace   => replace_vector_${suffix}
     procedure, pass :: lower_bound => lower_bound_vector_${suffix}
     ! procedure, pass :: make_iter => make_iter_vector_${suffix}
  end type vector_${suffix}

  ! public :: iterator_vector_${suffix}
  ! type :: iterator_vector_${suffix}
  !    private
  !    type(vector_${suffix}), pointer :: vec_ptr
  !    integer(int32) :: iter_
  !  contains
  !    procedure, pass :: next  => next_iterator_vector_${suffix}
  !    procedure, pass :: prev  => prev_iterator_vector_${suffix}
  !    procedure, pass :: begin => begin_iterator_vector_${suffix}
  !    procedure, pass :: end   => end_iterator_vector_${suffix}
  !    procedure, pass :: val   => val_iterator_vector_${suffix}
  ! end type vector_${suffix}
#+end_src
**** procedures of the vector
:PROPERTIES:
:header-args: :noweb-ref procedures-vector
:END:
***** init
=subroutine init= initialize vector by size.
#+name: init-vector
#+begin_src fortran :exports code :noweb no-export
  !> init_vector_${suffix}: Initialize the vector_${suffix} by size.
  subroutine init_vector_${suffix}(this, n)
    class(vector_${suffix}), intent(inout) :: this
    integer(int32), intent(in) :: n
    if (.not. allocated(this%arr_)) then
       allocate(this%arr_(n))
       this%size_ = 0 !n
       this%capa_ = n
       this%lb_   = 1
  #ifdef DEBUG
    else
       <<error-handling-filename>>
       <<error-handling-error_message-exit(err_num=1,string="Vector is already allocated...")>>
  #endif
    end if
  end subroutine init_vector_${suffix}

  ! !> init_vector_range_${suffix}: Initialize the vector_${suffix} by size.
  ! subroutine init_vector_range_${suffix}(this, lb, ub, ierr)
  !   class(vector_${suffix}), intent(inout) :: this
  !   integer(int32), intent(in) :: lb, ub
  !   integer(int32), intent(out), optional :: ierr
  !   if (lb > ub) then
  !      <<error-handling-return-ierr(ierr=1)>>
  !      <<error-handling-filename>>
  !      <<error-handling-error_message-exit(err_num=2,string="init_vector_range_${suffix}: `ub` must be larger than or equal to `lb`")>>
  !   end if
  !   call this%init(ub-lb+1)
  !   this%lb_ = lb
  !   if (present(ierr)) ierr = 0
  ! end subroutine init_vector_range_${suffix}
#+end_src
***** push_back
=subroutine push_back= insert value to the tail of elements of the vector.
#+name: push_back-vector
#+begin_src fortran :exports code
  !> push_back_vector_${suffix}: Insert value to the tail of elements of the vector.
  subroutine push_back_vector_${suffix}(this, val)
    class(vector_${suffix}), intent(inout) :: this
    ${type}, intent(in) :: val
    if (.not. allocated(this%arr_)) call this%init(1)
    if (this%size_ == this%capa_) then
       call this%resize(2*this%capa_)
    end if
    this%size_ = this%size_ + 1
    this%arr_(this%size_) = val
  end subroutine push_back_vector_${suffix}
  !> push_back_array_vector_${suffix}: Insert elemeents of array to the tail of elements of the vector.
  subroutine push_back_array_vector_${suffix}(this, arr)
    class(vector_${suffix}), intent(inout) :: this
    ${type}, intent(in) :: arr(:)
    integer(int32) :: s
    s = size(arr)
    if (.not. allocated(this%arr_)) call this%init(s)
    if (this%size_ + s > this%capa_) then
       call this%resize(this%size_ + s)
    end if
    this%arr_(this%size_+1:this%size_+s) = arr(:)
    this%size_ = this%size_ + s
  end subroutine push_back_array_vector_${suffix}
#+end_src
***** pop_back
=function pop_back= deletes the value in the end of arr_(:) of the vector and returns it.
#+name: pop_back-vector
#+begin_src fortran :exports code :noweb no-export
  !> push_back_vector_${suffix}: Delete the value in the end of arr_(:) of the vector and return it.
  ${type} function pop_back_vector_${suffix}(this, ierr)
    class(vector_${suffix}), intent(inout) :: this
    integer(int32), intent(out), optional :: ierr
    if (this%size_ == 0) then
       <<error-handling-return-ierr(ierr=1)>>
       <<error-handling-filename>>
       <<error-handling-error_message-exit(err_num=3,string="There are no elements that can pop_back.">>
    end if
    pop_back_vector_${suffix} = this%arr_(this%size_)
    this%size_ = this%size_ - 1
    if (present(ierr)) ierr = 0
  end function pop_back_vector_${suffix}
#+end_src
***** size
=function size= return current size of the vector.
#+name: size-vector
#+begin_src fortran :exports code
  !> size_vector_${suffix}: Return current size of the vector.
  pure integer(int32) function size_vector_${suffix}(this)
    class(vector_${suffix}), intent(in) :: this
    size_vector_${suffix} = this%size_
  end function size_vector_${suffix}
#+end_src
***** lbound
=function size= return current lbound of the vector.
#+name: lbound-vector
#+begin_src fortran :exports code
  !> size_vector_${suffix}: Return current lbound of the vector.
  pure integer(int32) function lbound_vector_${suffix}(this)
    class(vector_${suffix}), intent(in) :: this
    lbound_vector_${suffix} = this%lb_
  end function lbound_vector_${suffix}
#+end_src
***** ubound
=function size= return current ubound of the vector.
#+name: ubound-vector
#+begin_src fortran :exports code
  !> size_vector_${suffix}: Return current ubonud of the vector.
  pure integer(int32) function ubound_vector_${suffix}(this)
    class(vector_${suffix}), intent(in) :: this
    ubound_vector_${suffix} = this%lb_ + this%size_ - 1
  end function ubound_vector_${suffix}
#+end_src
***** resize
=subroutine resize= shrinks or expands arr_(:) of the vector.
#+name: resize-vector
#+begin_src fortran :exports code :noweb no-export
  !> resize_vector_${suffix}: Shrink or expand arr_(:) of the vector.
  subroutine resize_vector_${suffix}(this, resize)
    class(vector_${suffix}), intent(inout) :: this
    integer(int32), intent(in) :: resize
    ${type}, allocatable :: tmp(:)
    if (this%capa_ == resize) return
    allocate(tmp(resize))
    this%size_ = min(this%size_, resize)
    tmp(1:this%size_) = this%arr_(1:this%size_)
    call move_alloc(from = tmp, to = this%arr_)
    this%capa_ = resize
  end subroutine resize_vector_${suffix}

  !> resize_range_vector_${suffix}: Shrink or expand arr_(:) of the vector by lb and ub.
  subroutine resize_vector_range_${suffix}(this, lb, ub, ierr)
    class(vector_${suffix}), intent(inout) :: this
    integer(int32), intent(in) :: lb, ub
    integer(int32), intent(out), optional :: ierr
    if (ub > lb) then
       <<error-handling-return-ierr(ierr=1)>>
         <<error-handling-filename>>
         <<error-handling-error_message-exit(err_num=2,string="resize_range_vector_range_${suffix}: `ub` must be larger than or equal tox `lb`")>>
    end if
    call this%resize(ub-lb+1)
    this%lb_ = lb
    if (present(ierr)) ierr = 0
  end subroutine resize_vector_range_${suffix}
#+end_src
***** at
=function at= return the element that locate at `i` of the vector.
#+name: at-vector
#+begin_src fortran :exports code :noweb no-export
  !> at_vector_${suffix}: Return the element that locate at 'i' of the vector.
  ${type} function at_vector_${suffix}(this, i, ierr)
    class(vector_${suffix}), intent(in) :: this
    integer(int32), intent(in) :: i
    integer(int32), intent(out), optional :: ierr
  <<error-handling-vector-bounds-out>>
    at_vector_${suffix} = this%arr_(i - this%lb_ + 1)
    if (present(ierr)) ierr = 0
  end function at_vector_${suffix}
#+end_src
***** replace
=subroutine replace= replace the element of arr_(i).
#+name: replace-vector
#+begin_src fortran :exports code :noweb no-export
  !> replace_vector_${suffix}: Shrink or expand arr_(:) of the vector.
  subroutine replace_vector_${suffix}(this, i, val, ierr)
    class(vector_${suffix}), intent(inout) :: this
    integer(int32), intent(in) :: i
    integer(int32), intent(out), optional :: ierr
    ${type}, intent(in) :: val
  <<error-handling-vector-bounds-out>>
    this%arr_(i - this%lb_ + 1) = val
    if (present(ierr)) ierr = 0
  end subroutine replace_vector_${suffix}
#+end_src
***** lower_bound
=function lower_bound= returns the minimum index that is higher than or equal to `val`.
#+name: lower_bonud-vector
#+begin_src fortran :exports code :noweb no-export
  !> lower_bound_vector_${suffix}: Return the minimum index that is higher than or equal to 'val'.
  integer(int32) function lower_bound_vector_${suffix}(this, val)
    class(vector_${suffix}), intent(in) :: this
    ${type}, intent(in) :: val
    integer(int32) :: p, q, r
    p = 1
    r = this%size_
    if (this%arr_(r) < val) then
       lower_bound_vector_${suffix} = r + 1 + (this%lb_ - 1)
       return
    end if
    do
       q = (p+r)/2
       if (p + 1 > r) exit
       if (this%arr_(q) >= val) then
          r = q
       else
          p = q+1
       end if
    end do
    lower_bound_vector_${suffix} = q + (this%lb_ - 1)
  end function lower_bound_vector_${suffix}
#+end_src
**** error-handling
This handles the error about out-bounded index.
#+name: error-handling-vector-bounds-out
#+begin_src fortran :exports code :noweb no-export
  if (i < this%lbound() .or. i > this%ubound()) then
     <<error-handling-return-ierr(ierr="i - this%lbound()")>>
  #ifdef DEBUG
     <<error-handling-filename>>
     write(error_unit, '(a, *(i0, a))')&
          "Index ", i, " Out of bounds(", this%lbound(), ", ", this%ubound(), ")"
     <<error-handling-exit(err_num=1)>>
  #endif
  end if
#+end_src
**** process definition and procedures of the vector
#+name: wrapped_vector-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  wvec="wrapped_vector_${suffix}"
#+end_src
#+name: declaration-vector-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  cat <<EOF
  <<declaration-vector>>
  EOF
#+end_src
#+name: procedures-vector-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  cat <<EOF
  <<procedures-vector>>
  EOF
#+end_src
**** test
#+name: vector-test
#+begin_src fortran :exports code :tangle "../../test/test_vector.F90" :noweb no-export
  program test_vector
    use, intrinsic :: iso_fortran_env
    use vector_m
    implicit none
    integer(int32) :: i, j
    integer(int32) :: ierr
    integer(int32), parameter :: n = 10, low = 5, high = low+n-1
    type(vector_int32) :: v, v2
    do i = 1, n
       call v%push_back(i)
    end do
    do i = 0, v%size()+1
       j = v%lower_bound(i)
       <<assert(cond="j == max(1, i)", code=11, message="Return value of `lower_bound` is illegal in loop.")>>
    end do
    do i = 1, n
       <<assert(cond="v%at(i) == i" ,code=12)>>
       call v%replace(i, -i)
       <<assert(cond="v%at(i) == -i" ,code=13)>>
    end do
    j = v%at(n+1, ierr)
    <<assert-false(cond="ierr == 0", code=14, message="Return value of `at` is illegal.")>>
    do i = 1, n
       j = v%pop_back()
    end do
    j = v%pop_back(ierr)
    <<assert-false(cond="ierr == 0", code=15, message="Return value of `pop_back` is illegal.")>>

    call v2%init(low, high)
    do i = low, high
       call v2%push_back(i)
    end do
    do i = low-1, high+1
       j = v2%lower_bound(i)
       <<assert(cond="j == max(low, i)", code=21, message="Return value of `lower_bound` is illegal in loop.")>>
    end do
    do i = low, high
       <<assert(cond="v2%at(i) == i" ,code=22)>>
       call v2%replace(i, -i)
       <<assert(cond="v2%at(i) == -i" ,code=23)>>
    end do
    j = v2%at(high+1, ierr)
    <<assert-false(cond="ierr == 0", code=24, message="Return value of `at` is illegal.")>>
    do i = 1, n
       j = v2%pop_back()
    end do
    j = v2%pop_back(ierr)
    <<assert-false(cond="ierr == 0", code=25, message="Return value of `pop_back` is illegal.")>>
  end program test_vector
#+end_src
#+name: test-vector
#+begin_src fortran :flags "-cpp -g -fbacktrace" :exports code :results output :noweb no-export :cache yes
<<vector-module>>
<<vector-test>>
#+end_src

#+RESULTS[40d25dd65db7fe9ba7c78c1b3a9f083b98eb52cd]: test-vector
