** Binary Indexed Tree(BIT)
*** BITモジュールの全容
~i32~, ~i64~, ~r32~, ~r64~ でユーザ定義型とその実装を定義.
BITは =n= 個の値の区間 =[1, r]= までの部分和を =O(\log n)= で求めることができる.
更新も =O(\log n)= である.
#+name: binary_indexed_tree-module
#+begin_src fortran :exports code :tangle "binary_indexed_tree_m.F90" :comment link :noweb no-export
  module binary_indexed_tree_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    <<declaration-binary_indexed_tree-var(type="integer", type_kind="int32")>>
    <<declaration-binary_indexed_tree-var(type="integer", type_kind="int64")>>
    <<declaration-binary_indexed_tree-var(type="real", type_kind="real32")>>
    <<declaration-binary_indexed_tree-var(type="real", type_kind="real64")>>
  contains
    <<procedures-binary_indexed_tree-var(type="integer", type_kind="int32")>>
    <<procedures-binary_indexed_tree-var(type="integer", type_kind="int64")>>
    <<procedures-binary_indexed_tree-var(type="real", type_kind="real32")>>
    <<procedures-binary_indexed_tree-var(type="real", type_kind="real64")>>
  end module binary_indexed_tree_m
#+end_src
*** BIT型の宣言
まず, BIT型の宣言をする.
BIT型の振舞いとして
- =subroutine init(n)= でサイズ =n= , 値 =0= で初期化する.
- =subroutine init(arr(:))= で配列 =arr(:)= で初期化する.
- =subroutine reset()= でサイズを変えずに値を =0= にする.
- =i32 size()= でサイズを返す.
- =subroutine add(i, v)= でインデックス =i= へ =v= を加算する.
- =${type} sum1(r)= で 閉区間 =[1, r]= の和を返す.
- =${type} sum_range(l, r)= で 閉区間 =[l, r]= の和を返す.
- =i32 lower_bound(w)= は和がw以上になる最小のインデックスを返す.
- デコンストラクタ =destroy_${BIT}= はBIT型の配列を開放する.
とする. 配列のインデックスはFortranらしく, =1= 始まりとする.

~bash~ 変数を後で展開して, ソースコードを生み出す.
~bash~ 変数一覧.
- ~${BIT}~ はBIT型の名前, ~binary_indexed_tree_int32~ など.
- ~${type}~ は配列の要素の型, ~integer(int64)~ など.
- ~${zero}~ は ~${type}~ 型での =0=, ~0.0_real32~ など.
#+name: declaration-binary_indexed_tree
#+begin_src fortran :exports code
  public :: ${BIT}
  !> ${BIT}: can calculate the range sum O(log n).
  type :: ${BIT}
     private
     ${type}, allocatable :: arr_(:)
     integer(int32) :: size_ = 0
   contains
     procedure, pass :: init_${BIT}_by_size, init_${BIT}_by_arr
     generic         :: init  => init_${BIT}_by_size, init_${BIT}_by_arr
     procedure, pass :: reset => reset_${BIT}
     procedure, pass :: size  => size_${BIT}
     procedure, pass :: add       => add_${BIT}
     procedure, pass :: sum1      => sum1_${BIT}
     procedure, pass :: sum_range => sum_range_${BIT}
     procedure, pass :: lower_bound => lower_bound_${BIT}
     final :: destroy_${BIT}
  end type ${BIT}
#+end_src
*** BITのprocedures
:PROPERTIES:
:header-args: :noweb-ref procedures-binary_indexed_tree
:END:
***** init
=subroutine init= はBITを初期化する.
BITのサイズ =n= を渡すと, 全ての要素が =0= のBITができる.
BITへ配列 =arr(:)= を渡すと, その配列のBITができる.
#+name: init-binary_indexed-tree
#+begin_src fortran :exports code :noweb no-export
  !> init_${BIT}_by_size: Initialize the ${BIT} by size.
  !> All elements of ${BIT} is ${zero}.
  subroutine init_${BIT}_by_size(this, n)
    class(${BIT}), intent(inout) :: this
    integer(int32), intent(in) :: n
    !> Error exist if already allocated.
    if (allocated(this%arr_)) then
       <<../Implementations.org:error-handling-filename>>
       <<../Implementations.org:error-handling-error_message-exit(err_num=1,string="This ${BIT} is already allocated.")>>
    end if
    allocate(this%arr_(n), source = ${zero})
    this%size_ = n
  end subroutine init_${BIT}_by_size

  !> init_${BIT}_by_arr: Initialize the ${BIT} by array.
  subroutine init_${BIT}_by_arr(this, arr)
    class(${BIT}), intent(inout) :: this
    ${type}, intent(in) ::arr(:)
    integer(int32) :: i, arr_size
    arr_size = size(arr)
    call this%init(arr_size)
    do i = 1, arr_size
       call this%add(i, arr(i))
    end do
  end subroutine init_${BIT}_by_arr
#+end_src
***** reset
=subroutine reset= はBITの配列を全て =0= にする.
#+name: reset-binary_indexed-tree
#+begin_src fortran :exports code :noweb no-export
  !> reset_${BIT}: Replace `this%arr_(:)` with `0`.
  subroutine reset_${BIT}(this)
    class(${BIT}), intent(inout) :: this
    if (allocated(this%arr_)) then
       this%arr_(:) = ${zero}
    end if
  end subroutine reset_${BIT}
#+end_src
***** size
=function size= はサイズを返す.
#+name: size-binary_indexed_tree
#+begin_src fortran :exports code
  !> size_${BIT}: Return current size of the ${BIT}.
  pure integer(int32) function size_${BIT}(this) result(res)
    class(${BIT}), intent(in) :: this
    res = this%size_
  end function size_${BIT}
#+end_src
***** add
=subroutine add= は配列 =arr(:)= の =idx= 番目に =val= を足すことと同義である.
#+name: add-binary_indexed_tree
#+begin_src fortran :exports code :noweb no-export
  !> add_${BIT}: Add the value `val` into the index `idx` of `arr(:)`.
  subroutine add_${BIT}(this, idx, val)
    class(${BIT}), intent(inout) :: this
    integer(int32), intent(in) :: idx
    ${type}, intent(in) :: val
    integer(int32) :: i
    i = idx
    do
       if (i > this%size_) exit
       this%arr_(i) = this%arr_(i) + val
       i = i + iand(i, -i)
    end do
  end subroutine add_${BIT}
#+end_src
***** sum1
=function sum1= は 閉区間 =[1, r]= の和を返す.
#+name: sum-binary_indexed_tree
#+begin_src fortran :exports code :noweb no-export
  !> sum1_${BIT}: Return the summation of `arr(1:r)`.
  !> Return ${zero} if r < 0.
  ${type} function sum1_${BIT}(this, r) result(res)
    class(${BIT}), intent(in) :: this
    integer(int32), intent(in) :: r
    integer(int32) :: i
    res = ${zero}
    i = r
    do
       if (i < 1) return
       res = res + this%arr_(i)
       i = i - iand(i, -i)
    end do
  end function sum1_${BIT}
#+end_src
***** sum_range
==function sum_range= は 閉区間 =[l, r]= の和を返す.
#+name: sum_range-binary_indexed_tree
#+begin_src fortran :exports code :noweb no-export
  !> sum_range_${BIT}: Return the summation of `arr(l:r)`
  !> Returun ${zero} if r < l.
  ${type} function sum_range_${BIT}(this, l, r) result(res)
    class(${BIT}), intent(in) :: this
    integer(int32), intent(in) :: l, r
    res = ${zero}
    if (r < l) return
    res = this%sum1(r) - this%sum1(l-1)
  end function sum_range_${BIT}
#+end_src
***** lower_bound
=function lower_bound= は 和が =w= になるような最小のインデックスを返す.
#+name: lower_bound-binary_indexed_tree
#+begin_src fortran :exports code :noweb no-export
  !> lower_bound_${BIT}: Return the minimum index, which `x1 + x2 + ... + xres >= w`.
  !> Returun 0 if w <= ${zero}.
  integer(int32) function lower_bound_${BIT}(this, w) result(res)
    class(${BIT}), intent(in) :: this
    ${type}, intent(in) :: w
    ${type} :: w_tmp
    integer(int32) :: x, r, l
    if (w <= ${zero}) then
       res = 0_int32
       return
    end if
    w_tmp = w
    x = 0
    r = 1
    do while (r < this%size_)
       r = ishft(r, 1)
    end do
    l = r
    do while (l > 0)
       if (x + l <= this%size_) then
          if (this%arr_(x+l) < w_tmp) then
             w_tmp = w_tmp - this%arr_(x+l)
             x = x + l
          end if
       end if
       l = ishft(l, -1)
    end do
    res = x + 1
  end function lower_bound_${BIT}
#+end_src
***** final
=subroutine destroy_${BIT}= はBITの配列を開放する.
#+name: destroy-binary_indexed-tree
#+begin_src fortran :exports code :noweb no-export
  !> destroy_${BIT}: Replace `this%arr_(:)` with `0`.
  subroutine destroy_${BIT}(this)
    type(${BIT}), intent(inout) :: this
    if (allocated(this%arr_)) then
       deallocate(this%arr_)
    end if
  end subroutine destroy_${BIT}
#+end_src
*** bash で展開
上で定義したものを NOWEB (この場合はbash)で展開する.
型を ~case~ 分で ~Fortran~ 用に処理する.
#+name: binary_indexed_tree-var
#+begin_src bash :exports code :cache no :shebang #!/bin/bash
  case "${type}" in
      "real")
          zero="0.0_${type_kind}"
          ;;
      "integer")
          zero="0_${type_kind}"
          ;;
  esac
  type="${type}(${type_kind})"
  suffix="${type_kind}"
  BIT="binary_indexed_tree_${suffix}"
#+end_src
#+name: declaration-binary_indexed_tree-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<binary_indexed_tree-var>>
  cat <<EOF
  <<declaration-binary_indexed_tree>>
  EOF
#+end_src
#+name: procedures-binary_indexed_tree-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<binary_indexed_tree-var>>
  cat <<EOF
  <<procedures-binary_indexed_tree>>
  EOF
#+end_src
*** test
#+name: binary_indexed_tree-test
#+begin_src fortran :exports code :tangle "../../test/test_binary_indexed_tree.F90" :noweb no-export
  program test_binary_indexed_tree
    use, intrinsic :: iso_fortran_env
    use binary_indexed_tree_m
    implicit none
    integer(int32), parameter :: n = 10
    call check_summation(n)
    call check_inversion(n)
    call check_kth_element(n)
  contains
    subroutine check_summation(n)
      integer(int32), intent(in) :: n
      integer(int32), allocatable :: arr(:)
      integer(int32) :: i
      type(binary_indexed_tree_int32) :: bit
      allocate(arr, source = [(i, i = 1, n)])
      call bit%init(arr)
      <<../Implementations.org:assert(eq1="bit%size()", eq2="n", code=2, message="Size of `bit` is wrong.")>>
      do i = 1, n
         <<../Implementations.org:assert-eq(eq1="bit%sum1(i)", eq2="i*(i+1)/2", code=3, message="The summation of bit is wrong.")>>
      end do
    end subroutine check_summation
    subroutine check_inversion(n)
      integer(int32), intent(in) :: n
      integer(int32), allocatable :: arr(:)
      integer(int32) :: i, cnts
      type(binary_indexed_tree_int32) :: bit
      allocate(arr, source = [(i, i = n, 1, -1)])
      call bit%init(n)
      cnts = 0_int32
      do i = 1, n
         cnts = cnts + (i-1) - bit%sum1(arr(i))
         call bit%add(arr(i), 1)
         <<../Implementations.org:assert-eq(eq1="cnts", eq2="i*(i-1)/2", code=3, message="The inversion number of bit is wrong.")>>
      end do
      <<../Implementations.org:assert(eq1="bit%size()", eq2="n", code=2, message="Size of `bit` is wrong.")>>
    end subroutine check_inversion
    subroutine check_kth_element(n)
      integer(int32), intent(in) :: n
      integer(int32), allocatable :: arr(:)
      integer(int32) :: i, idx
      type(binary_indexed_tree_int32) :: bit
      allocate(arr, source = [(i, i = 1, n)])
      call bit%init(maxval(arr))
      do i = 1, n
         call bit%add(arr(i), 1)
      end do
      <<../Implementations.org:assert(eq1="bit%size()", eq2="n", code=2, message="Size of `bit` is wrong.")>>
      do i = 1, n
         idx = bit%lower_bound(i)
         <<../Implementations.org:assert-eq(eq1="idx", eq2="i", code=3, message="The `lower_bound` of bit is wrong.")>>
      end do
    end subroutine check_kth_element
  end program test_binary_indexed_tree
#+end_src
#+name: test-binary_indexed_tree
#+begin_src fortran :flags "-cpp -g -fbacktrace -fcheck=bounds" :exports code :results output :noweb no-export :cache yes
<<binary_indexed_tree-module>>
<<binary_indexed_tree-test>>
#+end_src

#+RESULTS[be7144920af4d5b8648030bcbae3963a3f7c6a5b]: test-binary_indexed_tree
