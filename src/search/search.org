* search
** binary-search
*** base
#+name: binary-search
#+begin_src fortran :exports code
  integer(int32), intent(in) :: lb, ub
  integer(int32) :: p, q, r
  !> ,binary_search: Search v from arr
  !> arguments:
  !> v: typeof(v).
  !> arr: array of some type.
  !> lb, ub: integer, lower bound and upper bound of arr.
  !> return:
  !> pos: position of v in arr if lb <= pos <= ub.
  !> v does not exist in arr if pos = lb-1.
  !> variables:
  !> p, r: integer, range of search [p, r]
  !> q: integer, q = floor( (p+r)/2 ).
  p = lb
  r = ub
  do
     if (p > r) then
        pos = lb-1
        return
     end if
     q = int((p+r)/2, int32)
     if (arr(q) == v) then
        pos = q
        return
     else if (arr(q) < v) then
        p = q + 1
     else
        r = q - 1
     end if
  end do
#+end_src
*** module
#+name: binary-search-module
#+begin_src fortran :exports code :noweb yes :tangle "binary_search_m.f90"
  module binary_search_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    public :: binary_search
    interface binary_search
       module procedure :: binary_search_int32, binary_search_int64
    end interface binary_search

  contains

    pure integer function binary_search_int32(v, arr, lb, ub) result(pos)
      integer(int32), intent(in) :: v
      integer(int32), intent(in) :: arr(lb:ub)
      <<binary-search>>
    end function binary_search_int32
    pure integer function binary_search_int64(v, arr, lb, ub) result(pos)
      integer(int64), intent(in) :: v
      integer(int64), intent(in) :: arr(lb:ub)
      <<binary-search>>
    end function binary_search_int64

  end module binary_search_m
#+end_src
*** test
#+name: binary-search-test
#+begin_src fortran :exports code :tangle "../../test/test_binary_search.f90"
  program test_binary_search
    use, intrinsic :: iso_fortran_env
    use binary_search_m
    implicit none
    integer :: arr(-1:7) = [1, 2, 3, 4, 4, 6, 7, 8, 9]
    integer :: i
    if (binary_search(2, arr, -1, 7) /= 0) then
       error stop 1
    else if (binary_search(5, arr, -1, 7) /= lbound(arr, dim = 1)-1) then
       error stop 2
    else if (binary_search(9, arr, -1, 7) /= 7) then
       error stop 3
    end if
  end program test_binary_search
#+end_src
#+begin_src fortran :flags -fbacktrace -g :exports code :results output :cache yes :noweb yes
    <<binary-search-module>>

    <<binary-search-test>>
#+end_src

#+RESULTS[ba220b33f2ebf16ce1e74e14608023809130da5e]:

** lower_bound
*** whole module of the lower_bound
This is whole module of the `lower_bound`.
There are several types for `lower_bound`.
#+name: lower_bound-module
#+begin_src fortran :exports code :tangle "lower_bound_m.f90" :comment link :noweb no-export
  module lower_bound_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    <<declaration-lower_bound-var(type="integer", type_kind="int8")>>
    <<declaration-lower_bound-var(type="integer", type_kind="int16")>>
    <<declaration-lower_bound-var(type="integer", type_kind="int32")>>
    <<declaration-lower_bound-var(type="integer", type_kind="int64")>>
    <<declaration-lower_bound-var(type="real", type_kind="real32")>>
    <<declaration-lower_bound-var(type="real", type_kind="real64")>>
    public :: lower_bound
  contains
    <<procedures-lower_bound-var(type="integer", type_kind="int8")>>
    <<procedures-lower_bound-var(type="integer", type_kind="int16")>>
    <<procedures-lower_bound-var(type="integer", type_kind="int32")>>
    <<procedures-lower_bound-var(type="integer", type_kind="int64")>>
    <<procedures-lower_bound-var(type="real", type_kind="real32")>>
    <<procedures-lower_bound-var(type="real", type_kind="real64")>>
  end module lower_bound_m
#+end_src
*** declaration of the lower_bound
#+name: declaration-lower_bound
#+begin_src fortran :exports code
    interface lower_bound
       module procedure :: lower_bound_${suffix}
    end interface lower_bound
#+end_src
*** procedures of the lower_bound
=function lower_bound= searches the index that has the element that is higher than or equal to the `val`.
Index starts from 1.
#+name: procedures-lower_bound
#+begin_src fortran :exports code
  !> lower_bound_${suffix}: Search
  pure integer(int32) function lower_bound_${suffix}(arr, val) result(res)
    ${type}, intent(in) :: arr(:)
    ${type}, intent(in) :: val
    integer(int32) :: p, q, r
    p = 1
    r = size(arr)
    if (arr(p) >= val) then
       res = p
       return
    else if (arr(r) < val) then
       res = r + 1
       return
    end if
    !> a, b, ..., k, `val`, l, ..., z
    !> arr(p) < val
    !> arr(r) >= val
    do
       q = (p+r)/2
       if (p + 1 >= r) exit
       if (arr(q) >= val) then
          r = q
       else
          p = q
       end if
    end do
    res = r
  end function lower_bound_${suffix}
#+end_src
*** process definition and procedures of the lower_bound
#+name: declaration-lower_bound-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  cat <<EOF
  <<declaration-lower_bound>>
  EOF
#+end_src
#+name: procedures-lower_bound-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
  cat <<EOF
  <<procedures-lower_bound>>
  EOF
#+end_src
*** test
- Test the array that has several values.
- Test the array that has only one value.
- Test the array that has some same values.
- Test the array that has all same values.
#+name: lower_bound-test
#+begin_src fortran :exports code :tangle "../../test/test_lower_bound.F90" :noweb no-export
  program test_lower_bound
    use, intrinsic :: iso_fortran_env
    use lower_bound_m
    implicit none
    integer(int32) :: i, j
    integer(int32), parameter :: n = 10
    integer(int32) :: arr(n), arr2(1), dup_arr(n), allsame_arr(n)
    do i = 1, n
       arr(i) = i
    end do
    ! arr
    do i = 0, n
       j = lower_bound(arr, i)
       <<../Implementations.org:assert(cond="j == max(1, i)",code=11,message="`lower_bound` does not work well...")>>
    end do
    j = lower_bound(arr, n+1)
    <<../Implementations.org:assert(cond="j == size(arr)+1",code=12,message="`lower_bound` does not work well...")>>
    ! arr2
    arr2(1) = 7
    <<../Implementations.org:assert(cond="lower_bound(arr2, 6) == 1",code=13,message="`lower_bound` does not work well for one element array...")>>
    <<../Implementations.org:assert(cond="lower_bound(arr2, 7) == 1",code=14,message="`lower_bound` does not work well for one element array...")>>
    <<../Implementations.org:assert(cond="lower_bound(arr2, 8) == 2",code=15,message="`lower_bound` does not work well for one element array...")>>
    ! dup_arr
    dup_arr = [1, 1, 2, 3, 3, 3, 3, 5, 5, 5]
    <<../Implementations.org:assert(cond="lower_bound(dup_arr, 0) == 1",code=21,message="`lower_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="lower_bound(dup_arr, 2) == 3",code=22,message="`lower_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="lower_bound(dup_arr, 3) == 4",code=23,message="`lower_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="lower_bound(dup_arr, 5) == 8",code=24,message="`lower_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="lower_bound(dup_arr, 7) > size(dup_arr)",code=25,message="`lower_bound` does not work well for the array that has same values...")>>
    ! allsame_arr
    allsame_arr = [(1, i = 1, n)]
    <<../Implementations.org:assert(cond="lower_bound(allsame_arr, 0) == 1",code=31,message="`lower_bound` does not work well for the array that has all same values...")>>
    <<../Implementations.org:assert(cond="lower_bound(allsame_arr, 1) == 1",code=32,message="`lower_bound` does not work well for the array that has all same values...")>>
    <<../Implementations.org:assert(cond="lower_bound(allsame_arr, 2) > size(allsame_arr)",code=33,message="`lower_bound` does not work well for the array that has all same values...")>>
  end program test_lower_bound
#+end_src
#+name: test-lower_bound
#+begin_src fortran :flags "-cpp -g -fbacktrace" :exports code :results output :noweb no-export :cache yes
<<lower_bound-module>>
<<lower_bound-test>>
#+end_src

#+RESULTS[5f2c3ba8a52ab423762ff3bec73c5758c9ed4516]: test-lower_bound

** upper_bound
*** whole module of the upper_bound
This is whole module of the `upper_bound`.
There are several types for `upper_bound`.
#+name: upper_bound-module
#+begin_src fortran :exports code :tangle "upper_bound_m.f90" :comment link :noweb no-export
  module upper_bound_m
    use, intrinsic :: iso_fortran_env
    implicit none
    private
    <<declaration-upper_bound-var(type="integer", type_kind="int8")>>
    <<declaration-upper_bound-var(type="integer", type_kind="int16")>>
    <<declaration-upper_bound-var(type="integer", type_kind="int32")>>
    <<declaration-upper_bound-var(type="integer", type_kind="int64")>>
    <<declaration-upper_bound-var(type="real", type_kind="real32")>>
    <<declaration-upper_bound-var(type="real", type_kind="real64")>>
    public :: upper_bound
  contains
    <<procedures-upper_bound-var(type="integer", type_kind="int8")>>
    <<procedures-upper_bound-var(type="integer", type_kind="int16")>>
    <<procedures-upper_bound-var(type="integer", type_kind="int32")>>
    <<procedures-upper_bound-var(type="integer", type_kind="int64")>>
    <<procedures-upper_bound-var(type="real", type_kind="real32")>>
    <<procedures-upper_bound-var(type="real", type_kind="real64")>>
  end module upper_bound_m
#+end_src
*** declaration of the upper_bound
#+name: declaration-upper_bound
#+begin_src fortran :exports code
    interface upper_bound
       module procedure :: upper_bound_${suffix}
    end interface upper_bound
#+end_src
*** procedures of the upper_bound
=function upper_bound= searches the index that has the element that is higher than the `val`.
Index starts from 1.
#+name: procedures-upper_bound
#+begin_src fortran :exports code
  !> upper_bound_${suffix}: Search
  pure integer(int32) function upper_bound_${suffix}(arr, val) result(res)
    ${type}, intent(in) :: arr(:)
    ${type}, intent(in) :: val
    integer(int32) :: p, q, r
    p = 1
    r = size(arr)
    if (arr(p) > val) then
       res = p
       return
    else if (arr(r) <= val) then
       res = r + 1
       return
    end if
    !> a, b, ..., k, `val`, l, ..., z
    !> arr(p) <= val
    !> arr(r) >  val
    do
       q = (p+r)/2
       if (p + 1 >= r) exit
       if (arr(q) > val) then
          r = q
       else
          p = q
       end if
    end do
    res = r
  end function upper_bound_${suffix}
#+end_src
*** process definition and procedures of the upper_bound
#+name: upper_bound-var
#+begin_src bash :exports code :results code
  case "${type}" in
      "character")
          type="character"
          suffix="character"
          ;;
      ,*)
          type="${type}(${type_kind})"
          suffix="${type_kind}"
          ;;
  esac
#+end_src
#+name: declaration-upper_bound-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<upper_bound-var>>
  cat <<EOF
  <<declaration-upper_bound>>
  EOF
#+end_src
#+name: procedures-upper_bound-var
#+begin_src bash :exports code :var type="integer" type_kind="int32" :results output :noweb no-export :cache no :shebang #!/bin/bash
  <<upper_bound-var>>
  cat <<EOF
  <<procedures-upper_bound>>
  EOF
#+end_src
*** test
- Test the array that has several values.
- Test the array that has only one value.
- Test the array that has some same values.
- Test the array that has all same values.
#+name: upper_bound-test
#+begin_src fortran :exports code :tangle "../../test/test_upper_bound.F90" :noweb no-export
  program test_upper_bound
    use, intrinsic :: iso_fortran_env
    use upper_bound_m
    implicit none
    integer(int32) :: i, j
    integer(int32), parameter :: n = 10
    integer(int32) :: arr(n), arr2(1), dup_arr(n), allsame_arr(n)
    do i = 1, n
       arr(i) = i
    end do
    ! arr
    do i = 0, n
       j = upper_bound(arr, i)
       <<../Implementations.org:assert(cond="j == i+1",code=11,message="`upper_bound` does not work well...")>>
    end do
    j = upper_bound(arr, n+1)
    <<../Implementations.org:assert(cond="j == size(arr)+1",code=12,message="`upper_bound` does not work well...")>>
    ! arr2
    arr2(1) = 7
    <<../Implementations.org:assert(cond="upper_bound(arr2, 6) == 1",code=13,message="`upper_bound` does not work well for one element array...")>>
    <<../Implementations.org:assert(cond="upper_bound(arr2, 7) == 2",code=14,message="`upper_bound` does not work well for one element array...")>>
    <<../Implementations.org:assert(cond="upper_bound(arr2, 8) == 2",code=15,message="`upper_bound` does not work well for one element array...")>>
    ! dup_arr
    dup_arr = [1, 1, 2, 3, 3, 3, 3, 5, 5, 5]
    <<../Implementations.org:assert(cond="upper_bound(dup_arr, 0) == 1",code=21,message="`upper_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(dup_arr, 1) == 3",code=22,message="`upper_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(dup_arr, 2) == 4",code=23,message="`upper_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(dup_arr, 4) == 8",code=24,message="`upper_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(dup_arr, 5) == size(dup_arr)+1",code=25,message="`upper_bound` does not work well for the array that has same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(dup_arr, 7) == size(dup_arr)+1",code=26,message="`upper_bound` does not work well for the array that has same values...")>>
    ! allsame_arr
    allsame_arr = [(1, i = 1, n)]
    <<../Implementations.org:assert(cond="upper_bound(allsame_arr, 0) == 1",code=31,message="`upper_bound` does not work well for the array that has all same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(allsame_arr, 1) == size(allsame_arr)+1",code=32,message="`upper_bound` does not work well for the array that has all same values...")>>
    <<../Implementations.org:assert(cond="upper_bound(allsame_arr, 2) == size(allsame_arr)+1",code=33,message="`upper_bound` does not work well for the array that has all same values...")>>
  end program test_upper_bound
#+end_src
#+name: test-upper_bound
#+begin_src fortran :flags "-cpp -g -fbacktrace" :exports code :results output :noweb no-export :cache yes
<<upper_bound-module>>
<<upper_bound-test>>
#+end_src

#+RESULTS[9ad483b1186461560aa02129073bf2b917a08072]: test-upper_bound
