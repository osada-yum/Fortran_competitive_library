#:def search_le(item)
pure integer(int32) function search_le(arr, key) result(res)
  ${item}$, intent(in) :: arr(:)
  ${item}$, intent(in) :: key
  integer(int32) :: p, q, r
  p = 1
  r = size(arr)
  if (r == 0) then
     res = 0; return
  else if (arr(p) > key) then
     res = p - 1; return
  else if (arr(r) <= key) then
     res = r; return
  end if
  !> invariant condition:
  !> arr(p) <= key < arr(r)
  binary_search: do while(p + 1 < r)
     q = (p + r) / 2
     if (arr(q) <= key) then
        p = q
     else !> key < arr(q)
        r = q
     end if
  end do binary_search
  res = p
end function search_le
#:enddef
